

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Nov 07 23:21:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.41
    45                           ; Generated 25/01/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18LF4520 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     _TMR0	set	4054
    79  0000                     _CCPR2L	set	4027
    80  0000                     _CCPR1L	set	4030
    81  0000                     _ADRESL	set	4035
    82  0000                     _ADRESH	set	4036
    83  0000                     _T0CONbits	set	4053
    84  0000                     _PORTB	set	3969
    85  0000                     _PORTD	set	3971
    86  0000                     _PORTCbits	set	3970
    87  0000                     _TRISD	set	3989
    88  0000                     _TRISB	set	3987
    89  0000                     _TRISCbits	set	3988
    90  0000                     _LATAbits	set	3977
    91  0000                     _PORTAbits	set	3968
    92  0000                     _CCP2CON	set	4026
    93  0000                     _PR2	set	4043
    94  0000                     _T2CON	set	4042
    95  0000                     _TRISC	set	3988
    96  0000                     _CCP1CON	set	4029
    97  0000                     _ADCON0bits	set	4034
    98  0000                     _ADCON2	set	4032
    99  0000                     _ADCON1	set	4033
   100  0000                     _ADCON0	set	4034
   101  0000                     _TRISAbits	set	3986
   102  0000                     _STKPTR	set	4092
   103  0000                     _TOSH	set	4094
   104  0000                     _TOSL	set	4093
   105  0000                     _TOSU	set	4095
   106  0000                     _INTCONbits	set	4082
   107  0000                     _TMR0ON	set	32431
   108                           
   109                           ; #config settings
   110  0000                     
   111                           	psect	cinit
   112  000DB8                     __pcinit:
   113                           	opt stack 0
   114  000DB8                     start_initialization:
   115                           	opt stack 0
   116  000DB8                     __initialization:
   117                           	opt stack 0
   118                           
   119                           ; Clear objects allocated to BIGRAM (456 bytes)
   120  000DB8  EE00  F0AD         	lfsr	0,__pbssBIGRAM
   121  000DBC  EE11 F0C8          	lfsr	1,456
   122  000DC0                     clear_0:
   123  000DC0  6AEE               	clrf	postinc0,c
   124  000DC2  50E5               	movf	postdec1,w,c
   125  000DC4  50E1               	movf	fsr1l,w,c
   126  000DC6  E1FC               	bnz	clear_0
   127  000DC8  50E2               	movf	fsr1h,w,c
   128  000DCA  E1FA               	bnz	clear_0
   129                           
   130                           ; Clear objects allocated to COMRAM (59 bytes)
   131  000DCC  EE00  F001         	lfsr	0,__pbssCOMRAM
   132  000DD0  0E3B               	movlw	59
   133  000DD2                     clear_1:
   134  000DD2  6AEE               	clrf	postinc0,c
   135  000DD4  06E8               	decf	wreg,f,c
   136  000DD6  E1FD               	bnz	clear_1
   137  000DD8                     end_of_initialization:
   138                           	opt stack 0
   139  000DD8                     __end_of__initialization:
   140                           	opt stack 0
   141  000DD8  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   142  000DDA  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   143  000DDC  0100               	movlb	0
   144  000DDE  EFAF  F005         	goto	_main	;jump to C main() function
   145                           postinc0	equ	0xFEE
   146                           wreg	equ	0xFE8
   147                           postdec1	equ	0xFE5
   148                           fsr1h	equ	0xFE2
   149                           fsr1l	equ	0xFE1
   150                           
   151                           	psect	bssCOMRAM
   152  000001                     __pbssCOMRAM:
   153                           	opt stack 0
   154  000001                     _sem:
   155                           	opt stack 0
   156  000001                     	ds	22
   157  000017                     _dezena:
   158                           	opt stack 0
   159  000017                     	ds	2
   160  000019                     _unidade:
   161                           	opt stack 0
   162  000019                     	ds	2
   163  00001B                     _temperatura_desejada:
   164                           	opt stack 0
   165  00001B                     	ds	2
   166  00001D                     _tSTATUS:
   167                           	opt stack 0
   168  00001D                     	ds	1
   169  00001E                     _tBSR:
   170                           	opt stack 0
   171  00001E                     	ds	1
   172  00001F                     _tWORK:
   173                           	opt stack 0
   174  00001F                     	ds	1
   175  000020                     _Q_DELAY:
   176                           	opt stack 0
   177  000020                     	ds	28
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           postdec1	equ	0xFE5
   181                           fsr1h	equ	0xFE2
   182                           fsr1l	equ	0xFE1
   183                           
   184                           	psect	bssBIGRAM
   185  0000AD                     __pbssBIGRAM:
   186                           	opt stack 0
   187  0000AD                     _F_APTOS:
   188                           	opt stack 0
   189  0000AD                     	ds	456
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1h	equ	0xFE2
   194                           fsr1l	equ	0xFE1
   195                           
   196                           	psect	cstackBANK0
   197  000080                     __pcstackBANK0:
   198                           	opt stack 0
   199  000080                     ?_map:
   200                           	opt stack 0
   201  000080                     map@x:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x0
   205  000080                     	ds	2
   206  000082                     map@in_min:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x2
   210  000082                     	ds	2
   211  000084                     map@in_max:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x4
   215  000084                     	ds	2
   216  000086                     map@out_min:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x6
   220  000086                     	ds	2
   221  000088                     map@out_max:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x8
   225  000088                     	ds	2
   226  00008A                     ??_map:
   227                           
   228                           ; 1 bytes @ 0xA
   229  00008A                     	ds	6
   230  000090                     ??_modificar_temp:
   231                           
   232                           ; 1 bytes @ 0x10
   233  000090                     	ds	1
   234  000091                     modificar_temp@temp:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x11
   238  000091                     	ds	2
   239  000093                     mostraDisplay@unidade:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x13
   243  000093                     	ds	2
   244  000095                     mostraDisplay@dezena:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x15
   248  000095                     	ds	2
   249  000097                     mostraDisplay@identificador:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x17
   253  000097                     	ds	1
   254  000098                     ??_verificarInput:
   255                           
   256                           ; 1 bytes @ 0x18
   257  000098                     	ds	1
   258  000099                     ?___wmul:
   259                           	opt stack 0
   260  000099                     delay_queue_create@delay_queue_handler:
   261                           	opt stack 0
   262  000099                     ___wmul@multiplier:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x19
   266  000099                     	ds	2
   267  00009B                     ??_delay_queue_create:
   268  00009B                     ___wmul@multiplicand:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x1B
   272  00009B                     	ds	2
   273  00009D                     delay_queue_create@i:
   274                           	opt stack 0
   275  00009D                     ___wmul@product:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x1D
   279  00009D                     	ds	2
   280  00009F                     nojoTaskCreate@id:
   281                           	opt stack 0
   282                           
   283                           ; 4 bytes @ 0x1F
   284  00009F                     	ds	4
   285  0000A3                     nojoTaskCreate@prior:
   286                           	opt stack 0
   287                           
   288                           ; 4 bytes @ 0x23
   289  0000A3                     	ds	4
   290  0000A7                     nojoTaskCreate@task_PTR:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x27
   294  0000A7                     	ds	2
   295  0000A9                     ??_nojoTaskCreate:
   296                           
   297                           ; 1 bytes @ 0x29
   298  0000A9                     	ds	4
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           postdec1	equ	0xFE5
   302                           fsr1h	equ	0xFE2
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	cstackCOMRAM
   306  00003C                     __pcstackCOMRAM:
   307                           	opt stack 0
   308  00003C                     ??_pisca_led_yellow:
   309  00003C                     ?_nojoTaskIdle:
   310                           	opt stack 0
   311  00003C                     ?_verificarInput:
   312                           	opt stack 0
   313  00003C                     ?_pisca_led_yellow:
   314                           	opt stack 0
   315  00003C                     ?_pisca_led_green:
   316                           	opt stack 0
   317  00003C                     ?i2___wmul:
   318                           	opt stack 0
   319  00003C                     ?___llmod:
   320                           	opt stack 0
   321  00003C                     i2___wmul@multiplier:
   322                           	opt stack 0
   323  00003C                     ___llmod@dividend:
   324                           	opt stack 0
   325                           
   326                           ; 4 bytes @ 0x0
   327  00003C                     	ds	1
   328  00003D                     ??_pisca_led_green:
   329                           
   330                           ; 1 bytes @ 0x1
   331  00003D                     	ds	1
   332  00003E                     ?_LerADC:
   333                           	opt stack 0
   334  00003E                     ?i1___wmul:
   335                           	opt stack 0
   336  00003E                     PWM1_value@velocidade:
   337                           	opt stack 0
   338  00003E                     i1___wmul@multiplier:
   339                           	opt stack 0
   340  00003E                     i2___wmul@multiplicand:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x2
   344  00003E                     	ds	2
   345  000040                     ??_LerADC:
   346  000040                     PWM1_value@resistencia:
   347                           	opt stack 0
   348  000040                     i1___wmul@multiplicand:
   349                           	opt stack 0
   350  000040                     i2___wmul@product:
   351                           	opt stack 0
   352  000040                     ___llmod@divisor:
   353                           	opt stack 0
   354                           
   355                           ; 4 bytes @ 0x4
   356  000040                     	ds	2
   357  000042                     LerADC@temp:
   358                           	opt stack 0
   359  000042                     i1___wmul@product:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x6
   363  000042                     	ds	2
   364  000044                     ?___awdiv:
   365                           	opt stack 0
   366  000044                     ___llmod@counter:
   367                           	opt stack 0
   368  000044                     valor_res_motor@temp:
   369                           	opt stack 0
   370  000044                     ___awdiv@dividend:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x8
   374  000044                     	ds	1
   375  000045                     ?_RR_scheduler:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x9
   379  000045                     	ds	1
   380  000046                     valor_res_motor@resistor:
   381                           	opt stack 0
   382  000046                     ___awdiv@divisor:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0xA
   386  000046                     	ds	2
   387  000048                     ___awdiv@counter:
   388                           	opt stack 0
   389  000048                     valor_res_motor@motor:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xC
   393  000048                     	ds	1
   394  000049                     ___awdiv@sign:
   395                           	opt stack 0
   396  000049                     RR_scheduler@installed:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0xD
   400  000049                     	ds	1
   401  00004A                     ___awdiv@quotient:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0xE
   405  00004A                     	ds	2
   406  00004C                     
   407                           ; 1 bytes @ 0x10
   408  00004C                     	ds	1
   409  00004D                     RR_scheduler@i:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x11
   413  00004D                     	ds	4
   414  000051                     RR_scheduler@pos_next_task:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x15
   418  000051                     	ds	4
   419  000055                     ??_nojoDispatcher:
   420                           
   421                           ; 1 bytes @ 0x19
   422  000055                     	ds	7
   423  00005C                     nojoDispatcher@state:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x20
   427  00005C                     	ds	1
   428  00005D                     nojoDispatcher@task_pos:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x21
   432  00005D                     	ds	4
   433  000061                     ??_timer_ISR:
   434                           
   435                           ; 1 bytes @ 0x25
   436  000061                     	ds	14
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1h	equ	0xFE2
   441                           fsr1l	equ	0xFE1
   442                           
   443 ;;
   444 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   445 ;;
   446 ;; *************** function _main *****************
   447 ;; Defined at:
   448 ;;		line 6 in file "../main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;		None
   453 ;; Return value:  Size  Location     Type
   454 ;;                  2  139[None  ] int 
   455 ;; Registers used:
   456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   462 ;;      Params:         0       0       0       0       0       0       0
   463 ;;      Locals:         0       0       0       0       0       0       0
   464 ;;      Temps:          0       0       0       0       0       0       0
   465 ;;      Totals:         0       0       0       0       0       0       0
   466 ;;Total ram usage:        0 bytes
   467 ;; Hardware stack levels required when called:    9
   468 ;; This function calls:
   469 ;;		_Init_PWM_AD
   470 ;;		_nojoScheduler
   471 ;;		_nojoStart
   472 ;;		_nojoTaskCreate
   473 ;;		_setupTimer
   474 ;; This function is called by:
   475 ;;		Startup code after reset
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text0
   480  000B5E                     __ptext0:
   481                           	opt stack 0
   482  000B5E                     _main:
   483                           	opt stack 22
   484                           
   485                           ;main.c: 9: nojoStart();
   486                           
   487                           ;incstack = 0
   488  000B5E  EC2A  F005         	call	_nojoStart	;wreg free
   489                           
   490                           ;main.c: 10: setupTimer();
   491  000B62  EC50  F007         	call	_setupTimer	;wreg free
   492                           
   493                           ;main.c: 12: Init_PWM_AD();
   494  000B66  EC83  F007         	call	_Init_PWM_AD	;wreg free
   495                           
   496                           ;main.c: 17: nojoTaskCreate(3, 7, modificar_temp);
   497  000B6A  0E03               	movlw	3
   498  000B6C  0100               	movlb	0	; () banked
   499  000B6E  6F9F               	movwf	nojoTaskCreate@id& (0+255),b
   500  000B70  0E00               	movlw	0
   501  000B72  6FA0               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   502  000B74  0E00               	movlw	0
   503  000B76  6FA1               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   504  000B78  0E00               	movlw	0
   505  000B7A  6FA2               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   506  000B7C  0E07               	movlw	7
   507  000B7E  0100               	movlb	0	; () banked
   508  000B80  6FA3               	movwf	nojoTaskCreate@prior& (0+255),b
   509  000B82  0E00               	movlw	0
   510  000B84  6FA4               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   511  000B86  0E00               	movlw	0
   512  000B88  6FA5               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   513  000B8A  0E00               	movlw	0
   514  000B8C  6FA6               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   515  000B8E  0EC0               	movlw	low _modificar_temp
   516  000B90  0100               	movlb	0	; () banked
   517  000B92  6FA7               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   518  000B94  0E09               	movlw	high _modificar_temp
   519  000B96  0100               	movlb	0	; () banked
   520  000B98  6FA8               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   521  000B9A  ECD9  F002         	call	_nojoTaskCreate	;wreg free
   522                           
   523                           ;main.c: 18: nojoTaskCreate(3, 7,verificarInput);
   524  000B9E  0E03               	movlw	3
   525  000BA0  0100               	movlb	0	; () banked
   526  000BA2  6F9F               	movwf	nojoTaskCreate@id& (0+255),b
   527  000BA4  0E00               	movlw	0
   528  000BA6  6FA0               	movwf	(nojoTaskCreate@id+1)& (0+255),b
   529  000BA8  0E00               	movlw	0
   530  000BAA  6FA1               	movwf	(nojoTaskCreate@id+2)& (0+255),b
   531  000BAC  0E00               	movlw	0
   532  000BAE  6FA2               	movwf	(nojoTaskCreate@id+3)& (0+255),b
   533  000BB0  0E07               	movlw	7
   534  000BB2  0100               	movlb	0	; () banked
   535  000BB4  6FA3               	movwf	nojoTaskCreate@prior& (0+255),b
   536  000BB6  0E00               	movlw	0
   537  000BB8  6FA4               	movwf	(nojoTaskCreate@prior+1)& (0+255),b
   538  000BBA  0E00               	movlw	0
   539  000BBC  6FA5               	movwf	(nojoTaskCreate@prior+2)& (0+255),b
   540  000BBE  0E00               	movlw	0
   541  000BC0  6FA6               	movwf	(nojoTaskCreate@prior+3)& (0+255),b
   542  000BC2  0E0C               	movlw	low _verificarInput
   543  000BC4  0100               	movlb	0	; () banked
   544  000BC6  6FA7               	movwf	nojoTaskCreate@task_PTR& (0+255),b
   545  000BC8  0E0D               	movlw	high _verificarInput
   546  000BCA  0100               	movlb	0	; () banked
   547  000BCC  6FA8               	movwf	(nojoTaskCreate@task_PTR+1)& (0+255),b
   548  000BCE  ECD9  F002         	call	_nojoTaskCreate	;wreg free
   549                           
   550                           ;main.c: 19: nojoScheduler();
   551  000BD2  EC77  F007         	call	_nojoScheduler	;wreg free
   552  000BD6                     l1931:
   553                           
   554                           ;main.c: 22: {
   555                           ;main.c: 23: __nop();
   556  000BD6  F000               	nop	
   557  000BD8  D7FE               	goto	l1931
   558  000BDA                     __end_of_main:
   559                           	opt stack 0
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1h	equ	0xFE2
   564                           fsr1l	equ	0xFE1
   565                           
   566 ;; *************** function _setupTimer *****************
   567 ;; Defined at:
   568 ;;		line 4 in file "../timer.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, status,2
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   582 ;;      Params:         0       0       0       0       0       0       0
   583 ;;      Locals:         0       0       0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0
   585 ;;      Totals:         0       0       0       0       0       0       0
   586 ;;Total ram usage:        0 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    7
   589 ;; This function calls:
   590 ;;		Nothing
   591 ;; This function is called by:
   592 ;;		_main
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text1
   597  000EA0                     __ptext1:
   598                           	opt stack 0
   599  000EA0                     _setupTimer:
   600                           	opt stack 23
   601                           
   602                           ;timer.c: 7: T0CONbits.T0CS = 0;
   603                           
   604                           ;incstack = 0
   605  000EA0  9AD5               	bcf	4053,5,c	;volatile
   606                           
   607                           ;timer.c: 8: T0CONbits.T08BIT = 0;
   608  000EA2  9CD5               	bcf	4053,6,c	;volatile
   609                           
   610                           ;timer.c: 9: T0CONbits.PSA = 0;
   611  000EA4  96D5               	bcf	4053,3,c	;volatile
   612                           
   613                           ;timer.c: 10: T0CONbits.T0PS = 0b010;
   614  000EA6  50D5               	movf	4053,w,c	;volatile
   615  000EA8  0BF8               	andlw	-8
   616  000EAA  0902               	iorlw	2
   617  000EAC  6ED5               	movwf	4053,c	;volatile
   618                           
   619                           ;timer.c: 11: INTCONbits.TMR0IE = 1;
   620  000EAE  8AF2               	bsf	intcon,5,c	;volatile
   621                           
   622                           ;timer.c: 12: INTCONbits.TMR0IF = 0;
   623  000EB0  94F2               	bcf	intcon,2,c	;volatile
   624                           
   625                           ;timer.c: 13: INTCONbits.PEIE = 1;
   626  000EB2  8CF2               	bsf	intcon,6,c	;volatile
   627  000EB4  0012               	return		;funcret
   628  000EB6                     __end_of_setupTimer:
   629                           	opt stack 0
   630                           intcon	equ	0xFF2
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1h	equ	0xFE2
   635                           fsr1l	equ	0xFE1
   636                           
   637 ;; *************** function _nojoTaskCreate *****************
   638 ;; Defined at:
   639 ;;		line 25 in file "../kernel.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  id              4   31[BANK0 ] unsigned long 
   642 ;;  prior           4   35[BANK0 ] unsigned long 
   643 ;;  task_PTR        2   39[BANK0 ] PTR FTN()PTR void 
   644 ;;		 -> verificarInput(2), modificar_temp(1), 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   656 ;;      Params:         0      10       0       0       0       0       0
   657 ;;      Locals:         0       0       0       0       0       0       0
   658 ;;      Temps:          0       4       0       0       0       0       0
   659 ;;      Totals:         0      14       0       0       0       0       0
   660 ;;Total ram usage:       14 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    8
   663 ;; This function calls:
   664 ;;		___wmul
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text2
   671  0005B2                     __ptext2:
   672                           	opt stack 0
   673  0005B2                     _nojoTaskCreate:
   674                           	opt stack 22
   675                           
   676                           ;kernel.c: 27: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_ID = id;
   677                           
   678                           ;incstack = 0
   679  0005B2  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   680  0005B6  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   681  0005BA  0E00               	movlw	0
   682  0005BC  0100               	movlb	0	; () banked
   683  0005BE  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   684  0005C0  0E70               	movlw	112
   685  0005C2  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   686  0005C4  ECC1  F006         	call	___wmul	;wreg free
   687  0005C8  0EAD               	movlw	low _F_APTOS
   688  0005CA  0100               	movlb	0	; () banked
   689  0005CC  2599               	addwf	?___wmul& (0+255),w,b
   690  0005CE  6ED9               	movwf	fsr2l,c
   691  0005D0  0E00               	movlw	high _F_APTOS
   692  0005D2  0100               	movlb	0	; () banked
   693  0005D4  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   694  0005D6  6EDA               	movwf	fsr2h,c
   695  0005D8  C09F  FFDE         	movff	nojoTaskCreate@id,postinc2
   696  0005DC  C0A0  FFDE         	movff	nojoTaskCreate@id+1,postinc2
   697  0005E0  C0A1  FFDE         	movff	nojoTaskCreate@id+2,postinc2
   698  0005E4  C0A2  FFDE         	movff	nojoTaskCreate@id+3,postinc2
   699                           
   700                           ;kernel.c: 28: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_PRIOR = prior;
   701  0005E8  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   702  0005EC  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   703  0005F0  0E00               	movlw	0
   704  0005F2  0100               	movlb	0	; () banked
   705  0005F4  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   706  0005F6  0E70               	movlw	112
   707  0005F8  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   708  0005FA  ECC1  F006         	call	___wmul	;wreg free
   709  0005FE  0E04               	movlw	4
   710  000600  0100               	movlb	0	; () banked
   711  000602  2799               	addwf	?___wmul& (0+255),f,b
   712  000604  0E00               	movlw	0
   713  000606  0100               	movlb	0	; () banked
   714  000608  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   715  00060A  0EAD               	movlw	low _F_APTOS
   716  00060C  0100               	movlb	0	; () banked
   717  00060E  2599               	addwf	?___wmul& (0+255),w,b
   718  000610  6ED9               	movwf	fsr2l,c
   719  000612  0E00               	movlw	high _F_APTOS
   720  000614  0100               	movlb	0	; () banked
   721  000616  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   722  000618  6EDA               	movwf	fsr2h,c
   723  00061A  C0A3  FFDE         	movff	nojoTaskCreate@prior,postinc2
   724  00061E  C0A4  FFDE         	movff	nojoTaskCreate@prior+1,postinc2
   725  000622  C0A5  FFDE         	movff	nojoTaskCreate@prior+2,postinc2
   726  000626  C0A6  FFDE         	movff	nojoTaskCreate@prior+3,postinc2
   727                           
   728                           ;kernel.c: 29: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_STATE = READY;
   729  00062A  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   730  00062E  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   731  000632  0E00               	movlw	0
   732  000634  0100               	movlb	0	; () banked
   733  000636  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   734  000638  0E70               	movlw	112
   735  00063A  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   736  00063C  ECC1  F006         	call	___wmul	;wreg free
   737  000640  0E08               	movlw	8
   738  000642  0100               	movlb	0	; () banked
   739  000644  2799               	addwf	?___wmul& (0+255),f,b
   740  000646  0E00               	movlw	0
   741  000648  0100               	movlb	0	; () banked
   742  00064A  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   743  00064C  0EAD               	movlw	low _F_APTOS
   744  00064E  0100               	movlb	0	; () banked
   745  000650  2599               	addwf	?___wmul& (0+255),w,b
   746  000652  6ED9               	movwf	fsr2l,c
   747  000654  0E00               	movlw	high _F_APTOS
   748  000656  0100               	movlb	0	; () banked
   749  000658  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   750  00065A  6EDA               	movwf	fsr2h,c
   751  00065C  0E00               	movlw	0
   752  00065E  6EDF               	movwf	indf2,c
   753                           
   754                           ;kernel.c: 30: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_PTR = task_PTR;
   755  000660  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   756  000664  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   757  000668  0E00               	movlw	0
   758  00066A  0100               	movlb	0	; () banked
   759  00066C  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   760  00066E  0E70               	movlw	112
   761  000670  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   762  000672  ECC1  F006         	call	___wmul	;wreg free
   763  000676  0E09               	movlw	9
   764  000678  0100               	movlb	0	; () banked
   765  00067A  2799               	addwf	?___wmul& (0+255),f,b
   766  00067C  0E00               	movlw	0
   767  00067E  0100               	movlb	0	; () banked
   768  000680  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   769  000682  0EAD               	movlw	low _F_APTOS
   770  000684  0100               	movlb	0	; () banked
   771  000686  2599               	addwf	?___wmul& (0+255),w,b
   772  000688  6ED9               	movwf	fsr2l,c
   773  00068A  0E00               	movlw	high _F_APTOS
   774  00068C  0100               	movlb	0	; () banked
   775  00068E  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   776  000690  6EDA               	movwf	fsr2h,c
   777  000692  C0A7  FFDE         	movff	nojoTaskCreate@task_PTR,postinc2
   778  000696  C0A8  FFDD         	movff	nojoTaskCreate@task_PTR+1,postdec2
   779                           
   780                           ;kernel.c: 31: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSL = (uint32_t) task_PTR;
   781  00069A  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   782  00069E  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   783  0006A2  0E00               	movlw	0
   784  0006A4  0100               	movlb	0	; () banked
   785  0006A6  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   786  0006A8  0E70               	movlw	112
   787  0006AA  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   788  0006AC  ECC1  F006         	call	___wmul	;wreg free
   789  0006B0  0E12               	movlw	18
   790  0006B2  0100               	movlb	0	; () banked
   791  0006B4  2799               	addwf	?___wmul& (0+255),f,b
   792  0006B6  0E00               	movlw	0
   793  0006B8  0100               	movlb	0	; () banked
   794  0006BA  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   795  0006BC  0EAD               	movlw	low _F_APTOS
   796  0006BE  0100               	movlb	0	; () banked
   797  0006C0  2599               	addwf	?___wmul& (0+255),w,b
   798  0006C2  6ED9               	movwf	fsr2l,c
   799  0006C4  0E00               	movlw	high _F_APTOS
   800  0006C6  0100               	movlb	0	; () banked
   801  0006C8  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   802  0006CA  6EDA               	movwf	fsr2h,c
   803  0006CC  C0A7  FFDF         	movff	nojoTaskCreate@task_PTR,indf2
   804                           
   805                           ;kernel.c: 32: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSH = (uint32_t) task_PTR >> 8;
   806  0006D0  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   807  0006D4  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   808  0006D8  0E00               	movlw	0
   809  0006DA  0100               	movlb	0	; () banked
   810  0006DC  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   811  0006DE  0E70               	movlw	112
   812  0006E0  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   813  0006E2  ECC1  F006         	call	___wmul	;wreg free
   814  0006E6  0E13               	movlw	19
   815  0006E8  0100               	movlb	0	; () banked
   816  0006EA  2799               	addwf	?___wmul& (0+255),f,b
   817  0006EC  0E00               	movlw	0
   818  0006EE  0100               	movlb	0	; () banked
   819  0006F0  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   820  0006F2  0EAD               	movlw	low _F_APTOS
   821  0006F4  0100               	movlb	0	; () banked
   822  0006F6  2599               	addwf	?___wmul& (0+255),w,b
   823  0006F8  6ED9               	movwf	fsr2l,c
   824  0006FA  0E00               	movlw	high _F_APTOS
   825  0006FC  0100               	movlb	0	; () banked
   826  0006FE  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   827  000700  6EDA               	movwf	fsr2h,c
   828  000702  0100               	movlb	0	; () banked
   829  000704  51A7               	movf	nojoTaskCreate@task_PTR& (0+255),w,b
   830  000706  0100               	movlb	0	; () banked
   831  000708  6FA9               	movwf	??_nojoTaskCreate& (0+255),b
   832  00070A  0100               	movlb	0	; () banked
   833  00070C  51A8               	movf	(nojoTaskCreate@task_PTR+1)& (0+255),w,b
   834  00070E  0100               	movlb	0	; () banked
   835  000710  6FAA               	movwf	(??_nojoTaskCreate+1)& (0+255),b
   836  000712  0100               	movlb	0	; () banked
   837  000714  6BAB               	clrf	(??_nojoTaskCreate+2)& (0+255),b
   838  000716  0100               	movlb	0	; () banked
   839  000718  6BAC               	clrf	(??_nojoTaskCreate+3)& (0+255),b
   840  00071A  C0AA  F0A9         	movff	??_nojoTaskCreate+1,??_nojoTaskCreate
   841  00071E  C0AB  F0AA         	movff	??_nojoTaskCreate+2,??_nojoTaskCreate+1
   842  000722  C0AC  F0AB         	movff	??_nojoTaskCreate+3,??_nojoTaskCreate+2
   843  000726  0100               	movlb	0	; () banked
   844  000728  6BAC               	clrf	(??_nojoTaskCreate+3)& (0+255),b
   845  00072A  0100               	movlb	0	; () banked
   846  00072C  51A9               	movf	??_nojoTaskCreate& (0+255),w,b
   847  00072E  6EDF               	movwf	indf2,c
   848                           
   849                           ;kernel.c: 33: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.task_stack
      +                          [0].TOSU = (uint32_t) task_PTR >> 16;
   850  000730  0100               	movlb	0	; () banked
   851  000732  51A7               	movf	nojoTaskCreate@task_PTR& (0+255),w,b
   852  000734  0100               	movlb	0	; () banked
   853  000736  6FA9               	movwf	??_nojoTaskCreate& (0+255),b
   854  000738  0100               	movlb	0	; () banked
   855  00073A  51A8               	movf	(nojoTaskCreate@task_PTR+1)& (0+255),w,b
   856  00073C  0100               	movlb	0	; () banked
   857  00073E  6FAA               	movwf	(??_nojoTaskCreate+1)& (0+255),b
   858  000740  0100               	movlb	0	; () banked
   859  000742  6BAB               	clrf	(??_nojoTaskCreate+2)& (0+255),b
   860  000744  0100               	movlb	0	; () banked
   861  000746  6BAC               	clrf	(??_nojoTaskCreate+3)& (0+255),b
   862  000748  0E11               	movlw	17
   863  00074A  D006               	goto	u860
   864  00074C                     u865:
   865  00074C  0100               	movlb	0	; () banked
   866  00074E  90D8               	bcf	status,0,c
   867  000750  33AC               	rrcf	(??_nojoTaskCreate+3)& (0+255),f,b
   868  000752  33AB               	rrcf	(??_nojoTaskCreate+2)& (0+255),f,b
   869  000754  33AA               	rrcf	(??_nojoTaskCreate+1)& (0+255),f,b
   870  000756  33A9               	rrcf	??_nojoTaskCreate& (0+255),f,b
   871  000758                     u860:
   872  000758  2EE8               	decfsz	wreg,f,c
   873  00075A  D7F8               	goto	u865
   874  00075C  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   875  000760  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   876  000764  0E00               	movlw	0
   877  000766  0100               	movlb	0	; () banked
   878  000768  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   879  00076A  0E70               	movlw	112
   880  00076C  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   881  00076E  ECC1  F006         	call	___wmul	;wreg free
   882  000772  0E14               	movlw	20
   883  000774  0100               	movlb	0	; () banked
   884  000776  2799               	addwf	?___wmul& (0+255),f,b
   885  000778  0E00               	movlw	0
   886  00077A  0100               	movlb	0	; () banked
   887  00077C  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   888  00077E  0EAD               	movlw	low _F_APTOS
   889  000780  0100               	movlb	0	; () banked
   890  000782  2599               	addwf	?___wmul& (0+255),w,b
   891  000784  6ED9               	movwf	fsr2l,c
   892  000786  0E00               	movlw	high _F_APTOS
   893  000788  0100               	movlb	0	; () banked
   894  00078A  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   895  00078C  6EDA               	movwf	fsr2h,c
   896  00078E  50DF               	movf	223,w,c
   897  000790  0100               	movlb	0	; () banked
   898  000792  19A9               	xorwf	??_nojoTaskCreate& (0+255),w,b
   899  000794  0BE0               	andlw	-32
   900  000796  19A9               	xorwf	??_nojoTaskCreate& (0+255),w,b
   901  000798  6EDF               	movwf	223,c
   902                           
   903                           ;kernel.c: 34: F_APTOS.FILA_APTOS[F_APTOS.tasks_installed].task_CTX.ctx_STACK.stack_size
      +                           = 1;
   904  00079A  C26D  F099         	movff	_F_APTOS+448,___wmul@multiplier
   905  00079E  C26E  F09A         	movff	_F_APTOS+449,___wmul@multiplier+1
   906  0007A2  0E00               	movlw	0
   907  0007A4  0100               	movlb	0	; () banked
   908  0007A6  6F9C               	movwf	(___wmul@multiplicand+1)& (0+255),b
   909  0007A8  0E70               	movlw	112
   910  0007AA  6F9B               	movwf	___wmul@multiplicand& (0+255),b
   911  0007AC  ECC1  F006         	call	___wmul	;wreg free
   912  0007B0  0E6F               	movlw	111
   913  0007B2  0100               	movlb	0	; () banked
   914  0007B4  2799               	addwf	?___wmul& (0+255),f,b
   915  0007B6  0E00               	movlw	0
   916  0007B8  0100               	movlb	0	; () banked
   917  0007BA  239A               	addwfc	(?___wmul+1)& (0+255),f,b
   918  0007BC  0EAD               	movlw	low _F_APTOS
   919  0007BE  0100               	movlb	0	; () banked
   920  0007C0  2599               	addwf	?___wmul& (0+255),w,b
   921  0007C2  6ED9               	movwf	fsr2l,c
   922  0007C4  0E00               	movlw	high _F_APTOS
   923  0007C6  0100               	movlb	0	; () banked
   924  0007C8  219A               	addwfc	(?___wmul+1)& (0+255),w,b
   925  0007CA  6EDA               	movwf	fsr2h,c
   926  0007CC  0E01               	movlw	1
   927  0007CE  6EDF               	movwf	indf2,c
   928                           
   929                           ; BSR set to: 0
   930                           ;kernel.c: 35: F_APTOS.tasks_installed++;
   931  0007D0  EE22  F06D         	lfsr	2,_F_APTOS+448
   932  0007D4  2ADE               	incf	postinc2,f,c
   933  0007D6  0E00               	movlw	0
   934  0007D8  22DE               	addwfc	postinc2,f,c
   935  0007DA  22DE               	addwfc	postinc2,f,c
   936  0007DC  22DE               	addwfc	postinc2,f,c
   937                           
   938                           ; BSR set to: 0
   939  0007DE  0012               	return		;funcret
   940  0007E0                     __end_of_nojoTaskCreate:
   941                           	opt stack 0
   942                           intcon	equ	0xFF2
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1h	equ	0xFE2
   947                           fsr1l	equ	0xFE1
   948                           indf2	equ	0xFDF
   949                           postinc2	equ	0xFDE
   950                           postdec2	equ	0xFDD
   951                           fsr2h	equ	0xFDA
   952                           fsr2l	equ	0xFD9
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function ___wmul *****************
   956 ;; Defined at:
   957 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  multiplier      2   25[BANK0 ] unsigned int 
   960 ;;  multiplicand    2   27[BANK0 ] unsigned int 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  product         2   29[BANK0 ] unsigned int 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  2   25[BANK0 ] unsigned int 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, prodl, prodh
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   972 ;;      Params:         0       4       0       0       0       0       0
   973 ;;      Locals:         0       2       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0
   975 ;;      Totals:         0       6       0       0       0       0       0
   976 ;;Total ram usage:        6 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    7
   979 ;; This function calls:
   980 ;;		Nothing
   981 ;; This function is called by:
   982 ;;		_nojoTaskCreate
   983 ;;		_delay_queue_remove
   984 ;;		_priority_scheduler
   985 ;;		_sem_wait
   986 ;;		_sem_post
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text3
   991  000D82                     __ptext3:
   992                           	opt stack 0
   993  000D82                     ___wmul:
   994                           	opt stack 22
   995                           
   996                           ; BSR set to: 0
   997                           ;incstack = 0
   998  000D82  0100               	movlb	0	; () banked
   999  000D84  5199               	movf	___wmul@multiplier& (0+255),w,b
  1000  000D86  0100               	movlb	0	; () banked
  1001  000D88  039B               	mulwf	___wmul@multiplicand& (0+255),b
  1002  000D8A  CFF3 F09D          	movff	prodl,___wmul@product
  1003  000D8E  CFF4 F09E          	movff	prodh,___wmul@product+1
  1004  000D92  0100               	movlb	0	; () banked
  1005  000D94  5199               	movf	___wmul@multiplier& (0+255),w,b
  1006  000D96  0100               	movlb	0	; () banked
  1007  000D98  039C               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1008  000D9A  50F3               	movf	prodl,w,c
  1009  000D9C  0100               	movlb	0	; () banked
  1010  000D9E  279E               	addwf	(___wmul@product+1)& (0+255),f,b
  1011  000DA0  0100               	movlb	0	; () banked
  1012  000DA2  519A               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1013  000DA4  0100               	movlb	0	; () banked
  1014  000DA6  039B               	mulwf	___wmul@multiplicand& (0+255),b
  1015  000DA8  50F3               	movf	prodl,w,c
  1016  000DAA  0100               	movlb	0	; () banked
  1017  000DAC  279E               	addwf	(___wmul@product+1)& (0+255),f,b
  1018                           
  1019                           ; BSR set to: 0
  1020  000DAE  C09D  F099         	movff	___wmul@product,?___wmul
  1021  000DB2  C09E  F09A         	movff	___wmul@product+1,?___wmul+1
  1022  000DB6  0012               	return	
  1023  000DB8                     __end_of___wmul:
  1024                           	opt stack 0
  1025                           prodh	equ	0xFF4
  1026                           prodl	equ	0xFF3
  1027                           intcon	equ	0xFF2
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           postdec1	equ	0xFE5
  1031                           fsr1h	equ	0xFE2
  1032                           fsr1l	equ	0xFE1
  1033                           indf2	equ	0xFDF
  1034                           postinc2	equ	0xFDE
  1035                           postdec2	equ	0xFDD
  1036                           fsr2h	equ	0xFDA
  1037                           fsr2l	equ	0xFD9
  1038                           status	equ	0xFD8
  1039                           
  1040 ;; *************** function _nojoStart *****************
  1041 ;; Defined at:
  1042 ;;		line 8 in file "../kernel.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1056 ;;      Params:         0       0       0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0       0       0
  1059 ;;      Totals:         0       0       0       0       0       0       0
  1060 ;;Total ram usage:        0 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    8
  1063 ;; This function calls:
  1064 ;;		_delay_queue_create
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text4
  1071  000A54                     __ptext4:
  1072                           	opt stack 0
  1073  000A54                     _nojoStart:
  1074                           	opt stack 22
  1075                           
  1076                           ;kernel.c: 13: F_APTOS.FILA_APTOS[0].task_ID = 0;
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;incstack = 0
  1080  000A54  0E00               	movlw	0
  1081  000A56  CFE8 F0AD          	movff	wreg,_F_APTOS
  1082  000A5A  0E00               	movlw	0
  1083  000A5C  CFE8 F0AE          	movff	wreg,_F_APTOS+1
  1084  000A60  0E00               	movlw	0
  1085  000A62  CFE8 F0AF          	movff	wreg,_F_APTOS+2
  1086  000A66  0E00               	movlw	0
  1087  000A68  CFE8 F0B0          	movff	wreg,_F_APTOS+3
  1088                           
  1089                           ;kernel.c: 14: F_APTOS.FILA_APTOS[0].task_PRIOR = 0;
  1090  000A6C  0E00               	movlw	0
  1091  000A6E  CFE8 F0B1          	movff	wreg,_F_APTOS+4
  1092  000A72  0E00               	movlw	0
  1093  000A74  CFE8 F0B2          	movff	wreg,_F_APTOS+5
  1094  000A78  0E00               	movlw	0
  1095  000A7A  CFE8 F0B3          	movff	wreg,_F_APTOS+6
  1096  000A7E  0E00               	movlw	0
  1097  000A80  CFE8 F0B4          	movff	wreg,_F_APTOS+7
  1098                           
  1099                           ;kernel.c: 15: F_APTOS.FILA_APTOS[0].task_STATE = READY;
  1100  000A84  0E00               	movlw	0
  1101  000A86  CFE8 F0B5          	movff	wreg,_F_APTOS+8
  1102                           
  1103                           ;kernel.c: 16: F_APTOS.FILA_APTOS[0].task_PTR = nojoTaskIdle;
  1104  000A8A  0EDE               	movlw	low _nojoTaskIdle
  1105  000A8C  CFE8 F0B6          	movff	wreg,_F_APTOS+9
  1106  000A90  0E0E               	movlw	high _nojoTaskIdle
  1107  000A92  CFE8 F0B7          	movff	wreg,_F_APTOS+10
  1108                           
  1109                           ;kernel.c: 17: F_APTOS.tasks_installed = 1;
  1110  000A96  0E01               	movlw	1
  1111  000A98  CFE8 F26D          	movff	wreg,_F_APTOS+448
  1112  000A9C  0E00               	movlw	0
  1113  000A9E  CFE8 F26E          	movff	wreg,_F_APTOS+449
  1114  000AA2  0E00               	movlw	0
  1115  000AA4  CFE8 F26F          	movff	wreg,_F_APTOS+450
  1116  000AA8  0E00               	movlw	0
  1117  000AAA  CFE8 F270          	movff	wreg,_F_APTOS+451
  1118                           
  1119                           ;kernel.c: 18: F_APTOS.task_running = 0;
  1120  000AAE  0E00               	movlw	0
  1121  000AB0  CFE8 F271          	movff	wreg,_F_APTOS+452
  1122  000AB4  0E00               	movlw	0
  1123  000AB6  CFE8 F272          	movff	wreg,_F_APTOS+453
  1124  000ABA  0E00               	movlw	0
  1125  000ABC  CFE8 F273          	movff	wreg,_F_APTOS+454
  1126  000AC0  0E00               	movlw	0
  1127  000AC2  CFE8 F274          	movff	wreg,_F_APTOS+455
  1128                           
  1129                           ;kernel.c: 19: delay_queue_create(&Q_DELAY);
  1130  000AC6  0E20               	movlw	low _Q_DELAY
  1131  000AC8  0100               	movlb	0	; () banked
  1132  000ACA  6F99               	movwf	delay_queue_create@delay_queue_handler& (0+255),b
  1133  000ACC  0E00               	movlw	high _Q_DELAY
  1134  000ACE  0100               	movlb	0	; () banked
  1135  000AD0  6F9A               	movwf	(delay_queue_create@delay_queue_handler+1)& (0+255),b
  1136  000AD2  ECED  F005         	call	_delay_queue_create	;wreg free
  1137                           
  1138                           ;kernel.c: 22: INTCONbits.GIE = 1;
  1139  000AD6  8EF2               	bsf	intcon,7,c	;volatile
  1140  000AD8  0012               	return		;funcret
  1141  000ADA                     __end_of_nojoStart:
  1142                           	opt stack 0
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           intcon	equ	0xFF2
  1146                           postinc0	equ	0xFEE
  1147                           wreg	equ	0xFE8
  1148                           postdec1	equ	0xFE5
  1149                           fsr1h	equ	0xFE2
  1150                           fsr1l	equ	0xFE1
  1151                           indf2	equ	0xFDF
  1152                           postinc2	equ	0xFDE
  1153                           postdec2	equ	0xFDD
  1154                           fsr2h	equ	0xFDA
  1155                           fsr2l	equ	0xFD9
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _delay_queue_create *****************
  1159 ;; Defined at:
  1160 ;;		line 8 in file "../delay.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  delay_queue_    2   25[BANK0 ] PTR struct queue_delay
  1163 ;;		 -> Q_DELAY(28), 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  i               2   29[BANK0 ] int 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1175 ;;      Params:         0       2       0       0       0       0       0
  1176 ;;      Locals:         0       2       0       0       0       0       0
  1177 ;;      Temps:          0       2       0       0       0       0       0
  1178 ;;      Totals:         0       6       0       0       0       0       0
  1179 ;;Total ram usage:        6 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    7
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_nojoStart
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text5
  1190  000BDA                     __ptext5:
  1191                           	opt stack 0
  1192  000BDA                     _delay_queue_create:
  1193                           	opt stack 22
  1194                           
  1195                           ;delay.c: 9: int i;
  1196                           ;delay.c: 10: delay_queue_handler->delay_queue_size = 0;
  1197                           
  1198                           ;incstack = 0
  1199  000BDA  0100               	movlb	0	; () banked
  1200  000BDC  EE20 F018          	lfsr	2,24
  1201  000BE0  5199               	movf	delay_queue_create@delay_queue_handler& (0+255),w,b
  1202  000BE2  26D9               	addwf	fsr2l,f,c
  1203  000BE4  519A               	movf	(delay_queue_create@delay_queue_handler+1)& (0+255),w,b
  1204  000BE6  22DA               	addwfc	fsr2h,f,c
  1205  000BE8  6ADE               	clrf	postinc2,c
  1206  000BEA  6ADE               	clrf	postinc2,c
  1207  000BEC  6ADE               	clrf	postinc2,c
  1208  000BEE  6ADD               	clrf	postdec2,c
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;delay.c: 11: for(i=0;i<3;i++)
  1212  000BF0  0E00               	movlw	0
  1213  000BF2  0100               	movlb	0	; () banked
  1214  000BF4  6F9E               	movwf	(delay_queue_create@i+1)& (0+255),b
  1215  000BF6  0E00               	movlw	0
  1216  000BF8  6F9D               	movwf	delay_queue_create@i& (0+255),b
  1217  000BFA                     l1615:
  1218                           
  1219                           ; BSR set to: 0
  1220  000BFA  0100               	movlb	0	; () banked
  1221  000BFC  BF9E               	btfsc	(delay_queue_create@i+1)& (0+255),7,b
  1222  000BFE  D008               	goto	l1619
  1223  000C00  0100               	movlb	0	; () banked
  1224  000C02  519E               	movf	(delay_queue_create@i+1)& (0+255),w,b
  1225  000C04  E127               	bnz	l17
  1226  000C06  0E03               	movlw	3
  1227  000C08  0100               	movlb	0	; () banked
  1228  000C0A  5D9D               	subwf	delay_queue_create@i& (0+255),w,b
  1229  000C0C  B0D8               	btfsc	status,0,c
  1230  000C0E  0012               	return	
  1231  000C10                     l1619:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;delay.c: 12: delay_queue_handler->delay_QUEUE[i].task_pos_ready_queue = 0;
  1235  000C10  C09D  F09B         	movff	delay_queue_create@i,??_delay_queue_create
  1236  000C14  C09E  F09C         	movff	delay_queue_create@i+1,??_delay_queue_create+1
  1237  000C18  0100               	movlb	0	; () banked
  1238  000C1A  90D8               	bcf	status,0,c
  1239  000C1C  379B               	rlcf	??_delay_queue_create& (0+255),f,b
  1240  000C1E  379C               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1241  000C20  0100               	movlb	0	; () banked
  1242  000C22  90D8               	bcf	status,0,c
  1243  000C24  379B               	rlcf	??_delay_queue_create& (0+255),f,b
  1244  000C26  379C               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1245  000C28  0100               	movlb	0	; () banked
  1246  000C2A  90D8               	bcf	status,0,c
  1247  000C2C  379B               	rlcf	??_delay_queue_create& (0+255),f,b
  1248  000C2E  379C               	rlcf	(??_delay_queue_create+1)& (0+255),f,b
  1249  000C30  0100               	movlb	0	; () banked
  1250  000C32  519B               	movf	??_delay_queue_create& (0+255),w,b
  1251  000C34  0100               	movlb	0	; () banked
  1252  000C36  2599               	addwf	delay_queue_create@delay_queue_handler& (0+255),w,b
  1253  000C38  6ED9               	movwf	fsr2l,c
  1254  000C3A  0100               	movlb	0	; () banked
  1255  000C3C  519C               	movf	(??_delay_queue_create+1)& (0+255),w,b
  1256  000C3E  0100               	movlb	0	; () banked
  1257  000C40  219A               	addwfc	(delay_queue_create@delay_queue_handler+1)& (0+255),w,b
  1258  000C42  6EDA               	movwf	fsr2h,c
  1259  000C44  6ADE               	clrf	postinc2,c
  1260  000C46  6ADE               	clrf	postinc2,c
  1261  000C48  6ADE               	clrf	postinc2,c
  1262  000C4A  6ADD               	clrf	postdec2,c
  1263                           
  1264                           ; BSR set to: 0
  1265  000C4C  0100               	movlb	0	; () banked
  1266  000C4E  4B9D               	infsnz	delay_queue_create@i& (0+255),f,b
  1267  000C50  2B9E               	incf	(delay_queue_create@i+1)& (0+255),f,b
  1268  000C52  D7D3               	goto	l1615
  1269  000C54                     l17:
  1270                           
  1271                           ; BSR set to: 0
  1272  000C54  0012               	return		;funcret
  1273  000C56                     __end_of_delay_queue_create:
  1274                           	opt stack 0
  1275                           prodh	equ	0xFF4
  1276                           prodl	equ	0xFF3
  1277                           intcon	equ	0xFF2
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1h	equ	0xFE2
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           fsr2h	equ	0xFDA
  1287                           fsr2l	equ	0xFD9
  1288                           status	equ	0xFD8
  1289                           
  1290 ;; *************** function _nojoScheduler *****************
  1291 ;; Defined at:
  1292 ;;		line 17 in file "../timer.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1306 ;;      Params:         0       0       0       0       0       0       0
  1307 ;;      Locals:         0       0       0       0       0       0       0
  1308 ;;      Temps:          0       0       0       0       0       0       0
  1309 ;;      Totals:         0       0       0       0       0       0       0
  1310 ;;Total ram usage:        0 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    7
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;;		_delay_queue_insert
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text6
  1322  000EEE                     __ptext6:
  1323                           	opt stack 0
  1324  000EEE                     _nojoScheduler:
  1325                           	opt stack 23
  1326                           
  1327                           ;timer.c: 19: TMR0 = 64911;
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;incstack = 0
  1331  000EEE  0EFD               	movlw	253
  1332  000EF0  6ED7               	movwf	4055,c	;volatile
  1333  000EF2  0E8F               	movlw	143
  1334  000EF4  6ED6               	movwf	4054,c	;volatile
  1335                           
  1336                           ;timer.c: 22: T0CONbits.TMR0ON = 1;
  1337  000EF6  8ED5               	bsf	4053,7,c	;volatile
  1338  000EF8  0012               	return		;funcret
  1339  000EFA                     __end_of_nojoScheduler:
  1340                           	opt stack 0
  1341                           prodh	equ	0xFF4
  1342                           prodl	equ	0xFF3
  1343                           intcon	equ	0xFF2
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1h	equ	0xFE2
  1348                           fsr1l	equ	0xFE1
  1349                           indf2	equ	0xFDF
  1350                           postinc2	equ	0xFDE
  1351                           postdec2	equ	0xFDD
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _Init_PWM_AD *****************
  1357 ;; Defined at:
  1358 ;;		line 110 in file "../kernel.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1372 ;;      Params:         0       0       0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    8
  1379 ;; This function calls:
  1380 ;;		_Inicializa_ADC
  1381 ;;		_PWM1_Init
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text7
  1388  000F06                     __ptext7:
  1389                           	opt stack 0
  1390  000F06                     _Init_PWM_AD:
  1391                           	opt stack 22
  1392                           
  1393                           ;kernel.c: 112: Inicializa_ADC();
  1394                           
  1395                           ;incstack = 0
  1396  000F06  EC66  F007         	call	_Inicializa_ADC	;wreg free
  1397                           
  1398                           ;kernel.c: 113: PWM1_Init();
  1399  000F0A  EC5B  F007         	call	_PWM1_Init	;wreg free
  1400  000F0E  0012               	return		;funcret
  1401  000F10                     __end_of_Init_PWM_AD:
  1402                           	opt stack 0
  1403                           prodh	equ	0xFF4
  1404                           prodl	equ	0xFF3
  1405                           intcon	equ	0xFF2
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           fsr1h	equ	0xFE2
  1410                           fsr1l	equ	0xFE1
  1411                           indf2	equ	0xFDF
  1412                           postinc2	equ	0xFDE
  1413                           postdec2	equ	0xFDD
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _PWM1_Init *****************
  1419 ;; Defined at:
  1420 ;;		line 99 in file "../kernel.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1434 ;;      Params:         0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    7
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_Init_PWM_AD
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text8
  1449  000EB6                     __ptext8:
  1450                           	opt stack 0
  1451  000EB6                     _PWM1_Init:
  1452                           	opt stack 22
  1453                           
  1454                           ;kernel.c: 101: CCP1CON = 0b00001100;
  1455                           
  1456                           ;incstack = 0
  1457  000EB6  0E0C               	movlw	12
  1458  000EB8  6EBD               	movwf	4029,c	;volatile
  1459                           
  1460                           ;kernel.c: 102: TRISC = 0b11111001;
  1461  000EBA  0EF9               	movlw	249
  1462  000EBC  6E94               	movwf	3988,c	;volatile
  1463                           
  1464                           ;kernel.c: 103: T2CON = 0b00000100;
  1465  000EBE  0E04               	movlw	4
  1466  000EC0  6ECA               	movwf	4042,c	;volatile
  1467                           
  1468                           ;kernel.c: 104: PR2 = 249;
  1469  000EC2  0EF9               	movlw	249
  1470  000EC4  6ECB               	movwf	4043,c	;volatile
  1471                           
  1472                           ;kernel.c: 105: CCP2CON = 0b00001100;
  1473  000EC6  0E0C               	movlw	12
  1474  000EC8  6EBA               	movwf	4026,c	;volatile
  1475  000ECA  0012               	return		;funcret
  1476  000ECC                     __end_of_PWM1_Init:
  1477                           	opt stack 0
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           intcon	equ	0xFF2
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           indf2	equ	0xFDF
  1487                           postinc2	equ	0xFDE
  1488                           postdec2	equ	0xFDD
  1489                           fsr2h	equ	0xFDA
  1490                           fsr2l	equ	0xFD9
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function _Inicializa_ADC *****************
  1494 ;; Defined at:
  1495 ;;		line 91 in file "../kernel.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         0       0       0       0       0       0       0
  1510 ;;      Locals:         0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0
  1512 ;;      Totals:         0       0       0       0       0       0       0
  1513 ;;Total ram usage:        0 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    7
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_Init_PWM_AD
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text9
  1524  000ECC                     __ptext9:
  1525                           	opt stack 0
  1526  000ECC                     _Inicializa_ADC:
  1527                           	opt stack 22
  1528                           
  1529                           ;kernel.c: 92: TRISAbits.TRISA0 = 1;
  1530                           
  1531                           ;incstack = 0
  1532  000ECC  8092               	bsf	3986,0,c	;volatile
  1533                           
  1534                           ;kernel.c: 93: ADCON0 = 0;
  1535  000ECE  0E00               	movlw	0
  1536  000ED0  6EC2               	movwf	4034,c	;volatile
  1537                           
  1538                           ;kernel.c: 94: ADCON1 = 0x0E;
  1539  000ED2  0E0E               	movlw	14
  1540  000ED4  6EC1               	movwf	4033,c	;volatile
  1541                           
  1542                           ;kernel.c: 95: ADCON2 = 0xD9;
  1543  000ED6  0ED9               	movlw	217
  1544  000ED8  6EC0               	movwf	4032,c	;volatile
  1545                           
  1546                           ;kernel.c: 96: ADCON0bits.ADON = 1;
  1547  000EDA  80C2               	bsf	4034,0,c	;volatile
  1548  000EDC  0012               	return		;funcret
  1549  000EDE                     __end_of_Inicializa_ADC:
  1550                           	opt stack 0
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           intcon	equ	0xFF2
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1h	equ	0xFE2
  1558                           fsr1l	equ	0xFE1
  1559                           indf2	equ	0xFDF
  1560                           postinc2	equ	0xFDE
  1561                           postdec2	equ	0xFDD
  1562                           fsr2h	equ	0xFDA
  1563                           fsr2l	equ	0xFD9
  1564                           status	equ	0xFD8
  1565                           
  1566 ;; *************** function _nojoTaskIdle *****************
  1567 ;; Defined at:
  1568 ;;		line 63 in file "../kernel.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  2   30[None  ] PTR void 
  1575 ;; Registers used:
  1576 ;;		wreg, status,2, status,0
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1582 ;;      Params:         0       0       0       0       0       0       0
  1583 ;;      Locals:         0       0       0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0
  1585 ;;      Totals:         0       0       0       0       0       0       0
  1586 ;;Total ram usage:        0 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    4
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_nojoStart
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text10
  1597  000EDE                     __ptext10:
  1598                           	opt stack 0
  1599  000EDE                     _nojoTaskIdle:
  1600                           	opt stack 24
  1601                           
  1602                           ;kernel.c: 67: __nop();
  1603                           
  1604                           ;incstack = 0
  1605  000EDE  F000               	nop	
  1606                           
  1607                           ;kernel.c: 68: __nop();
  1608  000EE0  F000               	nop	
  1609                           
  1610                           ;kernel.c: 69: __nop();
  1611  000EE2  F000               	nop	
  1612                           
  1613                           ;kernel.c: 73: return (0);
  1614  000EE4  0E00               	movlw	0
  1615  000EE6  6E3C               	movwf	?_nojoTaskIdle,c
  1616  000EE8  0E00               	movlw	0
  1617  000EEA  6E3D               	movwf	?_nojoTaskIdle+1,c
  1618  000EEC  0012               	return	
  1619  000EEE                     __end_of_nojoTaskIdle:
  1620                           	opt stack 0
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           intcon	equ	0xFF2
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           fsr1h	equ	0xFE2
  1628                           fsr1l	equ	0xFE1
  1629                           indf2	equ	0xFDF
  1630                           postinc2	equ	0xFDE
  1631                           postdec2	equ	0xFDD
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _pisca_led_yellow *****************
  1637 ;; Defined at:
  1638 ;;		line 32 in file "../tasks.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  2  240[None  ] PTR void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1652 ;;      Params:         0       0       0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0
  1654 ;;      Temps:          1       0       0       0       0       0       0
  1655 ;;      Totals:         1       0       0       0       0       0       0
  1656 ;;Total ram usage:        1 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    4
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		Interrupt level 1
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text11
  1667  000DE2                     __ptext11:
  1668                           	opt stack 0
  1669  000DE2                     _pisca_led_yellow:
  1670                           	opt stack 24
  1671                           
  1672                           ;tasks.c: 34: TRISAbits.RA3 = 0;
  1673                           
  1674                           ;incstack = 0
  1675  000DE2  9692               	bcf	3986,3,c	;volatile
  1676                           
  1677                           ;tasks.c: 35: PORTAbits.RA3 = 0;
  1678  000DE4  9680               	bcf	3968,3,c	;volatile
  1679  000DE6                     l1267:
  1680                           
  1681                           ;tasks.c: 38: {
  1682                           ;tasks.c: 39: PORTAbits.RA3 = ~LATAbits.LA3;
  1683  000DE6  A689               	btfss	3977,3,c	;volatile
  1684  000DE8  D002               	goto	u33_20
  1685  000DEA  0E01               	movlw	1
  1686  000DEC  D001               	goto	u33_26
  1687  000DEE                     u33_20:
  1688  000DEE  0E00               	movlw	0
  1689  000DF0                     u33_26:
  1690  000DF0  0AFF               	xorlw	255
  1691  000DF2  6E3C               	movwf	??_pisca_led_yellow& (0+255),c
  1692  000DF4  463C               	rlncf	??_pisca_led_yellow,f,c
  1693  000DF6  463C               	rlncf	??_pisca_led_yellow,f,c
  1694  000DF8  463C               	rlncf	??_pisca_led_yellow,f,c
  1695  000DFA  5080               	movf	3968,w,c	;volatile
  1696  000DFC  183C               	xorwf	??_pisca_led_yellow,w,c
  1697  000DFE  0BF7               	andlw	-9
  1698  000E00  183C               	xorwf	??_pisca_led_yellow,w,c
  1699  000E02  6E80               	movwf	3968,c	;volatile
  1700  000E04  F000               	nop		;# 
  1701  000E06  F000               	nop		;# 
  1702  000E08  F000               	nop		;# 
  1703  000E0A  D7ED               	goto	l1267
  1704  000E0C                     __end_of_pisca_led_yellow:
  1705                           	opt stack 0
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1h	equ	0xFE2
  1713                           fsr1l	equ	0xFE1
  1714                           indf2	equ	0xFDF
  1715                           postinc2	equ	0xFDE
  1716                           postdec2	equ	0xFDD
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _pisca_led_green *****************
  1722 ;; Defined at:
  1723 ;;		line 48 in file "../tasks.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  2  246[None  ] PTR void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         0       0       0       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0
  1739 ;;      Temps:          1       0       0       0       0       0       0
  1740 ;;      Totals:         1       0       0       0       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    4
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		Interrupt level 1
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text12
  1752  000E0C                     __ptext12:
  1753                           	opt stack 0
  1754  000E0C                     _pisca_led_green:
  1755                           	opt stack 24
  1756                           
  1757                           ;tasks.c: 50: TRISAbits.RA4 = 0;
  1758                           
  1759                           ;incstack = 0
  1760  000E0C  9892               	bcf	3986,4,c	;volatile
  1761                           
  1762                           ;tasks.c: 51: PORTAbits.RA4 = 0;
  1763  000E0E  9880               	bcf	3968,4,c	;volatile
  1764  000E10                     l1275:
  1765                           
  1766                           ;tasks.c: 54: {
  1767                           ;tasks.c: 55: PORTAbits.RA4 = ~LATAbits.LA4;
  1768  000E10  A889               	btfss	3977,4,c	;volatile
  1769  000E12  D002               	goto	u34_20
  1770  000E14  0E01               	movlw	1
  1771  000E16  D001               	goto	u34_26
  1772  000E18                     u34_20:
  1773  000E18  0E00               	movlw	0
  1774  000E1A                     u34_26:
  1775  000E1A  0AFF               	xorlw	255
  1776  000E1C  6E3D               	movwf	??_pisca_led_green& (0+255),c
  1777  000E1E  3A3D               	swapf	??_pisca_led_green,f,c
  1778  000E20  5080               	movf	3968,w,c	;volatile
  1779  000E22  183D               	xorwf	??_pisca_led_green,w,c
  1780  000E24  0BEF               	andlw	-17
  1781  000E26  183D               	xorwf	??_pisca_led_green,w,c
  1782  000E28  6E80               	movwf	3968,c	;volatile
  1783  000E2A  F000               	nop		;# 
  1784  000E2C  F000               	nop		;# 
  1785  000E2E  F000               	nop		;# 
  1786  000E30  D7EF               	goto	l1275
  1787  000E32                     __end_of_pisca_led_green:
  1788                           	opt stack 0
  1789                           prodh	equ	0xFF4
  1790                           prodl	equ	0xFF3
  1791                           intcon	equ	0xFF2
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1h	equ	0xFE2
  1796                           fsr1l	equ	0xFE1
  1797                           indf2	equ	0xFDF
  1798                           postinc2	equ	0xFDE
  1799                           postdec2	equ	0xFDD
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _modificar_temp *****************
  1805 ;; Defined at:
  1806 ;;		line 84 in file "../tasks.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  temp            2   17[BANK0 ] unsigned int 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1820 ;;      Params:         0       0       0       0       0       0       0
  1821 ;;      Locals:         0       2       0       0       0       0       0
  1822 ;;      Temps:          0       1       0       0       0       0       0
  1823 ;;      Totals:         0       3       0       0       0       0       0
  1824 ;;Total ram usage:        3 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    6
  1827 ;; This function calls:
  1828 ;;		_LerADC
  1829 ;;		_map
  1830 ;;		_valor_res_motor
  1831 ;; This function is called by:
  1832 ;;		_main
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text13
  1837  0009C0                     __ptext13:
  1838                           	opt stack 0
  1839  0009C0                     _modificar_temp:
  1840                           	opt stack 22
  1841                           
  1842                           ;tasks.c: 86: TRISAbits.RA4 = 0;
  1843                           
  1844                           ;incstack = 0
  1845  0009C0  9892               	bcf	3986,4,c	;volatile
  1846                           
  1847                           ;tasks.c: 87: PORTAbits.RA4 = 0;
  1848  0009C2  9880               	bcf	3968,4,c	;volatile
  1849  0009C4                     l1803:
  1850                           
  1851                           ;tasks.c: 91: {
  1852                           ;tasks.c: 92: PORTAbits.RA4 = ~LATAbits.LA4;
  1853  0009C4  A889               	btfss	3977,4,c	;volatile
  1854  0009C6  D002               	goto	u97_20
  1855  0009C8  0E01               	movlw	1
  1856  0009CA  D001               	goto	u97_26
  1857  0009CC                     u97_20:
  1858  0009CC  0E00               	movlw	0
  1859  0009CE                     u97_26:
  1860  0009CE  0AFF               	xorlw	255
  1861  0009D0  0100               	movlb	0	; () banked
  1862  0009D2  6F90               	movwf	??_modificar_temp& (0+255),b
  1863  0009D4  0100               	movlb	0	; () banked
  1864  0009D6  3B90               	swapf	??_modificar_temp& (0+255),f,b
  1865  0009D8  5080               	movf	3968,w,c	;volatile
  1866  0009DA  0100               	movlb	0	; () banked
  1867  0009DC  1990               	xorwf	??_modificar_temp& (0+255),w,b
  1868  0009DE  0BEF               	andlw	-17
  1869  0009E0  1990               	xorwf	??_modificar_temp& (0+255),w,b
  1870  0009E2  6E80               	movwf	3968,c	;volatile
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;tasks.c: 93: temp=LerADC();
  1874  0009E4  EC3F  F007         	call	_LerADC	;wreg free
  1875  0009E8  C03E  F091         	movff	?_LerADC,modificar_temp@temp
  1876  0009EC  C03F  F092         	movff	?_LerADC+1,modificar_temp@temp+1
  1877                           
  1878                           ;tasks.c: 94: while(temp!=map(temperatura_desejada, 0, 99, 0, 1023))
  1879  0009F0  D00C               	goto	l1811
  1880  0009F2                     l1807:
  1881                           
  1882                           ;tasks.c: 95: {
  1883                           ;tasks.c: 96: temp=LerADC();
  1884  0009F2  EC3F  F007         	call	_LerADC	;wreg free
  1885  0009F6  C03E  F091         	movff	?_LerADC,modificar_temp@temp
  1886  0009FA  C03F  F092         	movff	?_LerADC+1,modificar_temp@temp+1
  1887                           
  1888                           ;tasks.c: 97: valor_res_motor(temp);
  1889  0009FE  C091  F044         	movff	modificar_temp@temp,valor_res_motor@temp
  1890  000A02  C092  F045         	movff	modificar_temp@temp+1,valor_res_motor@temp+1
  1891  000A06  EC48  F004         	call	_valor_res_motor	;wreg free
  1892  000A0A                     l1811:
  1893  000A0A  C01B  F080         	movff	_temperatura_desejada,map@x
  1894  000A0E  C01C  F081         	movff	_temperatura_desejada+1,map@x+1
  1895  000A12  0E00               	movlw	0
  1896  000A14  0100               	movlb	0	; () banked
  1897  000A16  6F83               	movwf	(map@in_min+1)& (0+255),b
  1898  000A18  0E00               	movlw	0
  1899  000A1A  6F82               	movwf	map@in_min& (0+255),b
  1900  000A1C  0E00               	movlw	0
  1901  000A1E  0100               	movlb	0	; () banked
  1902  000A20  6F85               	movwf	(map@in_max+1)& (0+255),b
  1903  000A22  0E63               	movlw	99
  1904  000A24  6F84               	movwf	map@in_max& (0+255),b
  1905  000A26  0E00               	movlw	0
  1906  000A28  0100               	movlb	0	; () banked
  1907  000A2A  6F87               	movwf	(map@out_min+1)& (0+255),b
  1908  000A2C  0E00               	movlw	0
  1909  000A2E  6F86               	movwf	map@out_min& (0+255),b
  1910  000A30  0E03               	movlw	3
  1911  000A32  0100               	movlb	0	; () banked
  1912  000A34  6F89               	movwf	(map@out_max+1)& (0+255),b
  1913  000A36  6988               	setf	map@out_max& (0+255),b
  1914  000A38  EC94  F004         	call	_map	;wreg free
  1915  000A3C  0100               	movlb	0	; () banked
  1916  000A3E  5191               	movf	modificar_temp@temp& (0+255),w,b
  1917  000A40  0100               	movlb	0	; () banked
  1918  000A42  1980               	xorwf	?_map& (0+255),w,b
  1919  000A44  E1D6               	bnz	l1807
  1920  000A46  0100               	movlb	0	; () banked
  1921  000A48  5192               	movf	(modificar_temp@temp+1)& (0+255),w,b
  1922  000A4A  0100               	movlb	0	; () banked
  1923  000A4C  1981               	xorwf	(?_map+1)& (0+255),w,b
  1924  000A4E  B4D8               	btfsc	status,2,c
  1925  000A50  D7B9               	goto	l1803
  1926  000A52  D7CF               	goto	l1807
  1927  000A54                     __end_of_modificar_temp:
  1928                           	opt stack 0
  1929                           prodh	equ	0xFF4
  1930                           prodl	equ	0xFF3
  1931                           intcon	equ	0xFF2
  1932                           postinc0	equ	0xFEE
  1933                           wreg	equ	0xFE8
  1934                           postdec1	equ	0xFE5
  1935                           fsr1h	equ	0xFE2
  1936                           fsr1l	equ	0xFE1
  1937                           indf2	equ	0xFDF
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _valor_res_motor *****************
  1945 ;; Defined at:
  1946 ;;		line 64 in file "../tasks.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  temp            2    8[COMRAM] unsigned int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  motor           2   12[COMRAM] int 
  1951 ;;  resistor        2   10[COMRAM] int 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1961 ;;      Params:         2       0       0       0       0       0       0
  1962 ;;      Locals:         4       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0
  1964 ;;      Totals:         6       0       0       0       0       0       0
  1965 ;;Total ram usage:        6 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    5
  1968 ;; This function calls:
  1969 ;;		_PWM1_value
  1970 ;;		i1___wmul
  1971 ;; This function is called by:
  1972 ;;		_modificar_temp
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text14
  1977  000890                     __ptext14:
  1978                           	opt stack 0
  1979  000890                     _valor_res_motor:
  1980                           	opt stack 22
  1981                           
  1982                           ;tasks.c: 66: int motor,resistor;
  1983                           ;tasks.c: 67: if(temp>=20)
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;incstack = 0
  1987  000890  5045               	movf	valor_res_motor@temp+1,w,c
  1988  000892  E104               	bnz	i1u87_20
  1989  000894  0E14               	movlw	20
  1990  000896  5C44               	subwf	valor_res_motor@temp,w,c
  1991  000898  A0D8               	btfss	status,0,c
  1992  00089A  D02B               	goto	i1l1711
  1993  00089C                     i1u87_20:
  1994                           
  1995                           ;tasks.c: 68: {
  1996                           ;tasks.c: 70: motor=10*temp+150;
  1997  00089C  C044  F03E         	movff	valor_res_motor@temp,i1___wmul@multiplier
  1998  0008A0  C045  F03F         	movff	valor_res_motor@temp+1,i1___wmul@multiplier+1
  1999  0008A4  0E00               	movlw	0
  2000  0008A6  6E41               	movwf	i1___wmul@multiplicand+1,c
  2001  0008A8  0E0A               	movlw	10
  2002  0008AA  6E40               	movwf	i1___wmul@multiplicand,c
  2003  0008AC  EC19  F007         	call	i1___wmul	;wreg free
  2004  0008B0  0E96               	movlw	150
  2005  0008B2  243E               	addwf	?i1___wmul,w,c
  2006  0008B4  6E48               	movwf	valor_res_motor@motor,c
  2007  0008B6  0E00               	movlw	0
  2008  0008B8  203F               	addwfc	?i1___wmul+1,w,c
  2009  0008BA  6E49               	movwf	valor_res_motor@motor+1,c
  2010                           
  2011                           ;tasks.c: 71: resistor=10*temp+150;
  2012  0008BC  C044  F03E         	movff	valor_res_motor@temp,i1___wmul@multiplier
  2013  0008C0  C045  F03F         	movff	valor_res_motor@temp+1,i1___wmul@multiplier+1
  2014  0008C4  0E00               	movlw	0
  2015  0008C6  6E41               	movwf	i1___wmul@multiplicand+1,c
  2016  0008C8  0E0A               	movlw	10
  2017  0008CA  6E40               	movwf	i1___wmul@multiplicand,c
  2018  0008CC  EC19  F007         	call	i1___wmul	;wreg free
  2019  0008D0  0E96               	movlw	150
  2020  0008D2  243E               	addwf	?i1___wmul,w,c
  2021  0008D4  6E46               	movwf	valor_res_motor@resistor,c
  2022  0008D6  0E00               	movlw	0
  2023  0008D8  203F               	addwfc	?i1___wmul+1,w,c
  2024  0008DA  6E47               	movwf	valor_res_motor@resistor+1,c
  2025                           
  2026                           ;tasks.c: 72: PWM1_value(motor,resistor);
  2027  0008DC  C048  F03E         	movff	valor_res_motor@motor,PWM1_value@velocidade
  2028  0008E0  C049  F03F         	movff	valor_res_motor@motor+1,PWM1_value@velocidade+1
  2029  0008E4  C046  F040         	movff	valor_res_motor@resistor,PWM1_value@resistencia
  2030  0008E8  C047  F041         	movff	valor_res_motor@resistor+1,PWM1_value@resistencia+1
  2031  0008EC  EC88  F007         	call	_PWM1_value	;wreg free
  2032                           
  2033                           ;tasks.c: 74: }
  2034  0008F0  0012               	return	
  2035  0008F2                     i1l1711:
  2036                           
  2037                           ;tasks.c: 75: else
  2038                           ;tasks.c: 76: {
  2039                           ;tasks.c: 77: motor=-10*temp+250;
  2040  0008F2  C044  F03E         	movff	valor_res_motor@temp,i1___wmul@multiplier
  2041  0008F6  C045  F03F         	movff	valor_res_motor@temp+1,i1___wmul@multiplier+1
  2042  0008FA  0EFF               	movlw	255
  2043  0008FC  6E41               	movwf	i1___wmul@multiplicand+1,c
  2044  0008FE  0EF6               	movlw	246
  2045  000900  6E40               	movwf	i1___wmul@multiplicand,c
  2046  000902  EC19  F007         	call	i1___wmul	;wreg free
  2047  000906  0EFA               	movlw	250
  2048  000908  243E               	addwf	?i1___wmul,w,c
  2049  00090A  6E48               	movwf	valor_res_motor@motor,c
  2050  00090C  0E00               	movlw	0
  2051  00090E  203F               	addwfc	?i1___wmul+1,w,c
  2052  000910  6E49               	movwf	valor_res_motor@motor+1,c
  2053                           
  2054                           ;tasks.c: 78: PWM1_value(motor,0);
  2055  000912  C048  F03E         	movff	valor_res_motor@motor,PWM1_value@velocidade
  2056  000916  C049  F03F         	movff	valor_res_motor@motor+1,PWM1_value@velocidade+1
  2057  00091A  0E00               	movlw	0
  2058  00091C  6E41               	movwf	PWM1_value@resistencia+1,c
  2059  00091E  0E00               	movlw	0
  2060  000920  6E40               	movwf	PWM1_value@resistencia,c
  2061  000922  EC88  F007         	call	_PWM1_value	;wreg free
  2062  000926  0012               	return	
  2063  000928                     __end_of_valor_res_motor:
  2064                           	opt stack 0
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           intcon	equ	0xFF2
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postdec1	equ	0xFE5
  2071                           fsr1h	equ	0xFE2
  2072                           fsr1l	equ	0xFE1
  2073                           indf2	equ	0xFDF
  2074                           postinc2	equ	0xFDE
  2075                           postdec2	equ	0xFDD
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _PWM1_value *****************
  2081 ;; Defined at:
  2082 ;;		line 30 in file "../perifericos.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  velocidade      2    2[COMRAM] int 
  2085 ;;  resistencia     2    4[COMRAM] int 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		None
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         4       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0
  2100 ;;      Totals:         4       0       0       0       0       0       0
  2101 ;;Total ram usage:        4 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    4
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_valor_res_motor
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text15
  2112  000F10                     __ptext15:
  2113                           	opt stack 0
  2114  000F10                     _PWM1_value:
  2115                           	opt stack 22
  2116                           
  2117                           ;perifericos.c: 32: CCPR1L = velocidade;
  2118                           
  2119                           ;incstack = 0
  2120  000F10  C03E  FFBE         	movff	PWM1_value@velocidade,4030	;volatile
  2121                           
  2122                           ;perifericos.c: 33: CCPR2L = resistencia;
  2123  000F14  C040  FFBB         	movff	PWM1_value@resistencia,4027	;volatile
  2124  000F18  0012               	return		;funcret
  2125  000F1A                     __end_of_PWM1_value:
  2126                           	opt stack 0
  2127                           prodh	equ	0xFF4
  2128                           prodl	equ	0xFF3
  2129                           intcon	equ	0xFF2
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1h	equ	0xFE2
  2134                           fsr1l	equ	0xFE1
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _map *****************
  2143 ;; Defined at:
  2144 ;;		line 38 in file "../perifericos.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  x               2    0[BANK0 ] int 
  2147 ;;  in_min          2    2[BANK0 ] int 
  2148 ;;  in_max          2    4[BANK0 ] int 
  2149 ;;  out_min         2    6[BANK0 ] int 
  2150 ;;  out_max         2    8[BANK0 ] int 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  2    0[BANK0 ] int 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2162 ;;      Params:         0      10       0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0
  2164 ;;      Temps:          0       6       0       0       0       0       0
  2165 ;;      Totals:         0      16       0       0       0       0       0
  2166 ;;Total ram usage:       16 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    5
  2169 ;; This function calls:
  2170 ;;		___awdiv
  2171 ;;		i1___wmul
  2172 ;; This function is called by:
  2173 ;;		_modificar_temp
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text16
  2178  000928                     __ptext16:
  2179                           	opt stack 0
  2180  000928                     _map:
  2181                           	opt stack 22
  2182                           
  2183                           ;perifericos.c: 40: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_
      +                          min;
  2184                           
  2185                           ;incstack = 0
  2186  000928  C082  F08A         	movff	map@in_min,??_map
  2187  00092C  C083  F08B         	movff	map@in_min+1,??_map+1
  2188  000930  0100               	movlb	0	; () banked
  2189  000932  1F8A               	comf	??_map& (0+255),f,b
  2190  000934  1F8B               	comf	(??_map+1)& (0+255),f,b
  2191  000936  4B8A               	infsnz	??_map& (0+255),f,b
  2192  000938  2B8B               	incf	(??_map+1)& (0+255),f,b
  2193  00093A  0100               	movlb	0	; () banked
  2194  00093C  5180               	movf	map@x& (0+255),w,b
  2195  00093E  0100               	movlb	0	; () banked
  2196  000940  258A               	addwf	??_map& (0+255),w,b
  2197  000942  6E3E               	movwf	i1___wmul@multiplier,c
  2198  000944  0100               	movlb	0	; () banked
  2199  000946  5181               	movf	(map@x+1)& (0+255),w,b
  2200  000948  0100               	movlb	0	; () banked
  2201  00094A  218B               	addwfc	(??_map+1)& (0+255),w,b
  2202  00094C  6E3F               	movwf	i1___wmul@multiplier+1,c
  2203  00094E  C086  F08C         	movff	map@out_min,??_map+2
  2204  000952  C087  F08D         	movff	map@out_min+1,??_map+3
  2205  000956  0100               	movlb	0	; () banked
  2206  000958  1F8C               	comf	(??_map+2)& (0+255),f,b
  2207  00095A  1F8D               	comf	(??_map+3)& (0+255),f,b
  2208  00095C  4B8C               	infsnz	(??_map+2)& (0+255),f,b
  2209  00095E  2B8D               	incf	(??_map+3)& (0+255),f,b
  2210  000960  0100               	movlb	0	; () banked
  2211  000962  5188               	movf	map@out_max& (0+255),w,b
  2212  000964  0100               	movlb	0	; () banked
  2213  000966  258C               	addwf	(??_map+2)& (0+255),w,b
  2214  000968  6E40               	movwf	i1___wmul@multiplicand,c
  2215  00096A  0100               	movlb	0	; () banked
  2216  00096C  5189               	movf	(map@out_max+1)& (0+255),w,b
  2217  00096E  0100               	movlb	0	; () banked
  2218  000970  218D               	addwfc	(??_map+3)& (0+255),w,b
  2219  000972  6E41               	movwf	i1___wmul@multiplicand+1,c
  2220  000974  EC19  F007         	call	i1___wmul	;wreg free
  2221  000978  C03E  F044         	movff	?i1___wmul,___awdiv@dividend
  2222  00097C  C03F  F045         	movff	?i1___wmul+1,___awdiv@dividend+1
  2223  000980  C082  F08E         	movff	map@in_min,??_map+4
  2224  000984  C083  F08F         	movff	map@in_min+1,??_map+5
  2225  000988  0100               	movlb	0	; () banked
  2226  00098A  1F8E               	comf	(??_map+4)& (0+255),f,b
  2227  00098C  1F8F               	comf	(??_map+5)& (0+255),f,b
  2228  00098E  4B8E               	infsnz	(??_map+4)& (0+255),f,b
  2229  000990  2B8F               	incf	(??_map+5)& (0+255),f,b
  2230  000992  0100               	movlb	0	; () banked
  2231  000994  5184               	movf	map@in_max& (0+255),w,b
  2232  000996  0100               	movlb	0	; () banked
  2233  000998  258E               	addwf	(??_map+4)& (0+255),w,b
  2234  00099A  6E46               	movwf	___awdiv@divisor,c
  2235  00099C  0100               	movlb	0	; () banked
  2236  00099E  5185               	movf	(map@in_max+1)& (0+255),w,b
  2237  0009A0  0100               	movlb	0	; () banked
  2238  0009A2  218F               	addwfc	(??_map+5)& (0+255),w,b
  2239  0009A4  6E47               	movwf	___awdiv@divisor+1,c
  2240  0009A6  EC6D  F005         	call	___awdiv	;wreg free
  2241  0009AA  0100               	movlb	0	; () banked
  2242  0009AC  5186               	movf	map@out_min& (0+255),w,b
  2243  0009AE  2444               	addwf	?___awdiv,w,c
  2244  0009B0  0100               	movlb	0	; () banked
  2245  0009B2  6F80               	movwf	?_map& (0+255),b
  2246  0009B4  0100               	movlb	0	; () banked
  2247  0009B6  5187               	movf	(map@out_min+1)& (0+255),w,b
  2248  0009B8  2045               	addwfc	?___awdiv+1,w,c
  2249  0009BA  0100               	movlb	0	; () banked
  2250  0009BC  6F81               	movwf	(?_map+1)& (0+255),b
  2251  0009BE  0012               	return	
  2252  0009C0                     __end_of_map:
  2253                           	opt stack 0
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           intcon	equ	0xFF2
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postdec1	equ	0xFE5
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           indf2	equ	0xFDF
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           fsr2h	equ	0xFDA
  2266                           fsr2l	equ	0xFD9
  2267                           status	equ	0xFD8
  2268                           
  2269 ;; *************** function i1___wmul *****************
  2270 ;; Defined at:
  2271 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  multiplier      2    2[COMRAM] unsigned int 
  2274 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  __wmul          2    6[COMRAM] unsigned int 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  2    2[COMRAM] unsigned int 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, prodl, prodh
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2286 ;;      Params:         4       0       0       0       0       0       0
  2287 ;;      Locals:         2       0       0       0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0
  2289 ;;      Totals:         6       0       0       0       0       0       0
  2290 ;;Total ram usage:        6 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    4
  2293 ;; This function calls:
  2294 ;;		Nothing
  2295 ;; This function is called by:
  2296 ;;		_valor_res_motor
  2297 ;;		_map
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text17
  2302  000E32                     __ptext17:
  2303                           	opt stack 0
  2304  000E32                     i1___wmul:
  2305                           	opt stack 22
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;incstack = 0
  2309  000E32  503E               	movf	i1___wmul@multiplier,w,c
  2310  000E34  0240               	mulwf	i1___wmul@multiplicand,c
  2311  000E36  CFF3 F042          	movff	prodl,i1___wmul@product
  2312  000E3A  CFF4 F043          	movff	prodh,i1___wmul@product+1
  2313  000E3E  503E               	movf	i1___wmul@multiplier,w,c
  2314  000E40  0241               	mulwf	i1___wmul@multiplicand+1,c
  2315  000E42  50F3               	movf	prodl,w,c
  2316  000E44  2643               	addwf	i1___wmul@product+1,f,c
  2317  000E46  503F               	movf	i1___wmul@multiplier+1,w,c
  2318  000E48  0240               	mulwf	i1___wmul@multiplicand,c
  2319  000E4A  50F3               	movf	prodl,w,c
  2320  000E4C  2643               	addwf	i1___wmul@product+1,f,c
  2321  000E4E  C042  F03E         	movff	i1___wmul@product,?i1___wmul
  2322  000E52  C043  F03F         	movff	i1___wmul@product+1,?i1___wmul+1
  2323  000E56  0012               	return	
  2324  000E58                     __end_ofi1___wmul:
  2325                           	opt stack 0
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postdec1	equ	0xFE5
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function ___awdiv *****************
  2342 ;; Defined at:
  2343 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  dividend        2    8[COMRAM] int 
  2346 ;;  divisor         2   10[COMRAM] int 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  quotient        2   14[COMRAM] int 
  2349 ;;  sign            1   13[COMRAM] unsigned char 
  2350 ;;  counter         1   12[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  2    8[COMRAM] int 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2360 ;;      Params:         4       0       0       0       0       0       0
  2361 ;;      Locals:         4       0       0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0
  2363 ;;      Totals:         8       0       0       0       0       0       0
  2364 ;;Total ram usage:        8 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    4
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_map
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text18
  2375  000ADA                     __ptext18:
  2376                           	opt stack 0
  2377  000ADA                     ___awdiv:
  2378                           	opt stack 22
  2379                           
  2380                           ;incstack = 0
  2381  000ADA  0E00               	movlw	0
  2382  000ADC  6E49               	movwf	___awdiv@sign,c
  2383  000ADE  AE47               	btfss	___awdiv@divisor+1,7,c
  2384  000AE0  D006               	goto	i1l1653
  2385  000AE2  6C46               	negf	___awdiv@divisor,c
  2386  000AE4  1E47               	comf	___awdiv@divisor+1,f,c
  2387  000AE6  B0D8               	btfsc	status,0,c
  2388  000AE8  2A47               	incf	___awdiv@divisor+1,f,c
  2389  000AEA  0E01               	movlw	1
  2390  000AEC  6E49               	movwf	___awdiv@sign,c
  2391  000AEE                     i1l1653:
  2392  000AEE  AE45               	btfss	___awdiv@dividend+1,7,c
  2393  000AF0  D006               	goto	i1l1659
  2394  000AF2  6C44               	negf	___awdiv@dividend,c
  2395  000AF4  1E45               	comf	___awdiv@dividend+1,f,c
  2396  000AF6  B0D8               	btfsc	status,0,c
  2397  000AF8  2A45               	incf	___awdiv@dividend+1,f,c
  2398  000AFA  0E01               	movlw	1
  2399  000AFC  1A49               	xorwf	___awdiv@sign,f,c
  2400  000AFE                     i1l1659:
  2401  000AFE  0E00               	movlw	0
  2402  000B00  6E4B               	movwf	___awdiv@quotient+1,c
  2403  000B02  0E00               	movlw	0
  2404  000B04  6E4A               	movwf	___awdiv@quotient,c
  2405  000B06  5046               	movf	___awdiv@divisor,w,c
  2406  000B08  1047               	iorwf	___awdiv@divisor+1,w,c
  2407  000B0A  B4D8               	btfsc	status,2,c
  2408  000B0C  D01C               	goto	i1l1681
  2409  000B0E  0E01               	movlw	1
  2410  000B10  6E48               	movwf	___awdiv@counter,c
  2411  000B12  D004               	goto	i1l1667
  2412  000B14                     i1l1665:
  2413  000B14  90D8               	bcf	status,0,c
  2414  000B16  3646               	rlcf	___awdiv@divisor,f,c
  2415  000B18  3647               	rlcf	___awdiv@divisor+1,f,c
  2416  000B1A  2A48               	incf	___awdiv@counter,f,c
  2417  000B1C                     i1l1667:
  2418  000B1C  AE47               	btfss	___awdiv@divisor+1,7,c
  2419  000B1E  D7FA               	goto	i1l1665
  2420  000B20                     i1l1669:
  2421  000B20  90D8               	bcf	status,0,c
  2422  000B22  364A               	rlcf	___awdiv@quotient,f,c
  2423  000B24  364B               	rlcf	___awdiv@quotient+1,f,c
  2424  000B26  5046               	movf	___awdiv@divisor,w,c
  2425  000B28  5C44               	subwf	___awdiv@dividend,w,c
  2426  000B2A  5047               	movf	___awdiv@divisor+1,w,c
  2427  000B2C  5845               	subwfb	___awdiv@dividend+1,w,c
  2428  000B2E  A0D8               	btfss	status,0,c
  2429  000B30  D005               	goto	i1l1677
  2430  000B32  5046               	movf	___awdiv@divisor,w,c
  2431  000B34  5E44               	subwf	___awdiv@dividend,f,c
  2432  000B36  5047               	movf	___awdiv@divisor+1,w,c
  2433  000B38  5A45               	subwfb	___awdiv@dividend+1,f,c
  2434  000B3A  804A               	bsf	___awdiv@quotient,0,c
  2435  000B3C                     i1l1677:
  2436  000B3C  90D8               	bcf	status,0,c
  2437  000B3E  3247               	rrcf	___awdiv@divisor+1,f,c
  2438  000B40  3246               	rrcf	___awdiv@divisor,f,c
  2439  000B42  2E48               	decfsz	___awdiv@counter,f,c
  2440  000B44  D7ED               	goto	i1l1669
  2441  000B46                     i1l1681:
  2442  000B46  5049               	movf	___awdiv@sign,w,c
  2443  000B48  B4D8               	btfsc	status,2,c
  2444  000B4A  D004               	goto	i1l1685
  2445  000B4C  6C4A               	negf	___awdiv@quotient,c
  2446  000B4E  1E4B               	comf	___awdiv@quotient+1,f,c
  2447  000B50  B0D8               	btfsc	status,0,c
  2448  000B52  2A4B               	incf	___awdiv@quotient+1,f,c
  2449  000B54                     i1l1685:
  2450  000B54  C04A  F044         	movff	___awdiv@quotient,?___awdiv
  2451  000B58  C04B  F045         	movff	___awdiv@quotient+1,?___awdiv+1
  2452  000B5C  0012               	return	
  2453  000B5E                     __end_of___awdiv:
  2454                           	opt stack 0
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           intcon	equ	0xFF2
  2458                           postinc0	equ	0xFEE
  2459                           wreg	equ	0xFE8
  2460                           postdec1	equ	0xFE5
  2461                           fsr1h	equ	0xFE2
  2462                           fsr1l	equ	0xFE1
  2463                           indf2	equ	0xFDF
  2464                           postinc2	equ	0xFDE
  2465                           postdec2	equ	0xFDD
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _LerADC *****************
  2471 ;; Defined at:
  2472 ;;		line 17 in file "../perifericos.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  temp            2    6[COMRAM] unsigned int 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  2    2[COMRAM] unsigned int 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2486 ;;      Params:         2       0       0       0       0       0       0
  2487 ;;      Locals:         2       0       0       0       0       0       0
  2488 ;;      Temps:          2       0       0       0       0       0       0
  2489 ;;      Totals:         6       0       0       0       0       0       0
  2490 ;;Total ram usage:        6 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    4
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_modificar_temp
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text19
  2501  000E7E                     __ptext19:
  2502                           	opt stack 0
  2503  000E7E                     _LerADC:
  2504                           	opt stack 23
  2505                           
  2506                           ;perifericos.c: 18: unsigned int temp;
  2507                           ;perifericos.c: 20: ADCON0bits.GO = 1;
  2508                           
  2509                           ;incstack = 0
  2510  000E7E  82C2               	bsf	4034,1,c	;volatile
  2511  000E80                     i1l330:
  2512  000E80  B2C2               	btfsc	4034,1,c	;volatile
  2513  000E82  D7FE               	goto	i1l330
  2514                           
  2515                           ;perifericos.c: 22: temp = ADRESH;
  2516  000E84  CFC4 F042          	movff	4036,LerADC@temp	;volatile
  2517  000E88  6A43               	clrf	LerADC@temp+1,c
  2518                           
  2519                           ;perifericos.c: 23: temp = ((temp << 8)| ADRESL );
  2520  000E8A  5042               	movf	LerADC@temp,w,c
  2521  000E8C  6E40               	movwf	??_LerADC& (0+255),c
  2522  000E8E  50C3               	movf	4035,w,c	;volatile
  2523  000E90  6E42               	movwf	LerADC@temp,c
  2524  000E92  C040  F043         	movff	??_LerADC,LerADC@temp+1
  2525                           
  2526                           ;perifericos.c: 25: return temp;
  2527  000E96  C042  F03E         	movff	LerADC@temp,?_LerADC
  2528  000E9A  C043  F03F         	movff	LerADC@temp+1,?_LerADC+1
  2529  000E9E  0012               	return	
  2530  000EA0                     __end_of_LerADC:
  2531                           	opt stack 0
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1h	equ	0xFE2
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           postinc2	equ	0xFDE
  2542                           postdec2	equ	0xFDD
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _verificarInput *****************
  2548 ;; Defined at:
  2549 ;;		line 109 in file "../tasks.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  2  127[None  ] PTR void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2563 ;;      Params:         0       0       0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0
  2565 ;;      Temps:          0       1       0       0       0       0       0
  2566 ;;      Totals:         0       1       0       0       0       0       0
  2567 ;;Total ram usage:        1 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    6
  2570 ;; This function calls:
  2571 ;;		_botaoAumentar
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text20
  2578  000D0C                     __ptext20:
  2579                           	opt stack 0
  2580  000D0C                     _verificarInput:
  2581                           	opt stack 22
  2582                           
  2583                           ;tasks.c: 111: TRISCbits.RC0=1;
  2584                           
  2585                           ;incstack = 0
  2586  000D0C  8094               	bsf	3988,0,c	;volatile
  2587                           
  2588                           ;tasks.c: 112: TRISAbits.RA4=0;
  2589  000D0E  9892               	bcf	3986,4,c	;volatile
  2590                           
  2591                           ;tasks.c: 113: TRISB=0;
  2592  000D10  0E00               	movlw	0
  2593  000D12  6E93               	movwf	3987,c	;volatile
  2594                           
  2595                           ;tasks.c: 114: TRISD=0;
  2596  000D14  0E00               	movlw	0
  2597  000D16  6E95               	movwf	3989,c	;volatile
  2598  000D18                     l1817:
  2599                           
  2600                           ;tasks.c: 119: if (PORTCbits.RC0==0){
  2601  000D18  B082               	btfsc	3970,0,c	;volatile
  2602  000D1A  D015               	goto	l1823
  2603                           
  2604                           ;tasks.c: 123: PORTAbits.RA4 = ~LATAbits.LA4;
  2605  000D1C  A889               	btfss	3977,4,c	;volatile
  2606  000D1E  D002               	goto	u100_20
  2607  000D20  0E01               	movlw	1
  2608  000D22  D001               	goto	u100_26
  2609  000D24                     u100_20:
  2610  000D24  0E00               	movlw	0
  2611  000D26                     u100_26:
  2612  000D26  0AFF               	xorlw	255
  2613  000D28  0100               	movlb	0	; () banked
  2614  000D2A  6F98               	movwf	??_verificarInput& (0+255),b
  2615  000D2C  0100               	movlb	0	; () banked
  2616  000D2E  3B98               	swapf	??_verificarInput& (0+255),f,b
  2617  000D30  5080               	movf	3968,w,c	;volatile
  2618  000D32  0100               	movlb	0	; () banked
  2619  000D34  1998               	xorwf	??_verificarInput& (0+255),w,b
  2620  000D36  0BEF               	andlw	-17
  2621  000D38  1998               	xorwf	??_verificarInput& (0+255),w,b
  2622  000D3A  6E80               	movwf	3968,c	;volatile
  2623  000D3C  F000               	nop		;# 
  2624  000D3E  F000               	nop		;# 
  2625  000D40  F000               	nop		;# 
  2626                           
  2627                           ;tasks.c: 130: botaoAumentar();
  2628  000D42  EC5E  F006         	call	_botaoAumentar	;wreg free
  2629  000D46                     l1823:
  2630                           
  2631                           ;tasks.c: 133: }
  2632                           ;tasks.c: 134: if (PORTAbits.RA2==0){
  2633  000D46  5080               	movf	3968,w,c	;volatile
  2634  000D48  D7E7               	goto	l1817
  2635  000D4A                     __end_of_verificarInput:
  2636                           	opt stack 0
  2637                           prodh	equ	0xFF4
  2638                           prodl	equ	0xFF3
  2639                           intcon	equ	0xFF2
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           postdec1	equ	0xFE5
  2643                           fsr1h	equ	0xFE2
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _botaoAumentar *****************
  2653 ;; Defined at:
  2654 ;;		line 150 in file "../tasks.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2668 ;;      Params:         0       0       0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    5
  2675 ;; This function calls:
  2676 ;;		_mostraDisplay
  2677 ;; This function is called by:
  2678 ;;		_verificarInput
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text21
  2683  000CBC                     __ptext21:
  2684                           	opt stack 0
  2685  000CBC                     _botaoAumentar:
  2686                           	opt stack 22
  2687                           
  2688                           ;tasks.c: 152: if(temperatura_desejada==40);
  2689                           
  2690                           ;incstack = 0
  2691  000CBC  0E28               	movlw	40
  2692  000CBE  181B               	xorwf	_temperatura_desejada,w,c
  2693  000CC0  101C               	iorwf	_temperatura_desejada+1,w,c
  2694  000CC2  B4D8               	btfsc	status,2,c
  2695  000CC4  D012               	goto	i1l1739
  2696                           
  2697                           ;tasks.c: 153: else
  2698                           ;tasks.c: 154: {
  2699                           ;tasks.c: 155: temperatura_desejada++;
  2700  000CC6  4A1B               	infsnz	_temperatura_desejada,f,c
  2701  000CC8  2A1C               	incf	_temperatura_desejada+1,f,c
  2702                           
  2703                           ;tasks.c: 159: unidade++;
  2704  000CCA  4A19               	infsnz	_unidade,f,c
  2705  000CCC  2A1A               	incf	_unidade+1,f,c
  2706                           
  2707                           ;tasks.c: 160: if(unidade>=10)
  2708  000CCE  BE1A               	btfsc	_unidade+1,7,c
  2709  000CD0  D00C               	goto	i1l1739
  2710  000CD2  501A               	movf	_unidade+1,w,c
  2711  000CD4  E104               	bnz	i1u90_20
  2712  000CD6  0E0A               	movlw	10
  2713  000CD8  5C19               	subwf	_unidade,w,c
  2714  000CDA  A0D8               	btfss	status,0,c
  2715  000CDC  D006               	goto	i1l1739
  2716  000CDE                     i1u90_20:
  2717                           
  2718                           ;tasks.c: 161: {
  2719                           ;tasks.c: 162: unidade=0;
  2720  000CDE  0E00               	movlw	0
  2721  000CE0  6E1A               	movwf	_unidade+1,c
  2722  000CE2  0E00               	movlw	0
  2723  000CE4  6E19               	movwf	_unidade,c
  2724                           
  2725                           ;tasks.c: 163: dezena++;
  2726  000CE6  4A17               	infsnz	_dezena,f,c
  2727  000CE8  2A18               	incf	_dezena+1,f,c
  2728  000CEA                     i1l1739:
  2729                           
  2730                           ;tasks.c: 165: }
  2731                           ;tasks.c: 166: }
  2732                           ;tasks.c: 168: mostraDisplay(unidade,dezena, '°');
  2733  000CEA  C019  F093         	movff	_unidade,mostraDisplay@unidade
  2734  000CEE  C01A  F094         	movff	_unidade+1,mostraDisplay@unidade+1
  2735  000CF2  C017  F095         	movff	_dezena,mostraDisplay@dezena
  2736  000CF6  C018  F096         	movff	_dezena+1,mostraDisplay@dezena+1
  2737  000CFA  0EB0               	movlw	176
  2738  000CFC  0100               	movlb	0	; () banked
  2739  000CFE  6F97               	movwf	mostraDisplay@identificador& (0+255),b
  2740  000D00  ECA5  F006         	call	_mostraDisplay	;wreg free
  2741  000D04  F000               	nop		;# 
  2742  000D06  F000               	nop		;# 
  2743  000D08  F000               	nop		;# 
  2744  000D0A  0012               	return		;funcret
  2745  000D0C                     __end_of_botaoAumentar:
  2746                           	opt stack 0
  2747                           prodh	equ	0xFF4
  2748                           prodl	equ	0xFF3
  2749                           intcon	equ	0xFF2
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1h	equ	0xFE2
  2754                           fsr1l	equ	0xFE1
  2755                           indf2	equ	0xFDF
  2756                           postinc2	equ	0xFDE
  2757                           postdec2	equ	0xFDD
  2758                           fsr2h	equ	0xFDA
  2759                           fsr2l	equ	0xFD9
  2760                           status	equ	0xFD8
  2761                           
  2762 ;; *************** function _mostraDisplay *****************
  2763 ;; Defined at:
  2764 ;;		line 176 in file "../tasks.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  unidade         2   19[BANK0 ] int 
  2767 ;;  dezena          2   21[BANK0 ] int 
  2768 ;;  identificado    1   23[BANK0 ] unsigned char 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2780 ;;      Params:         0       5       0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0       0       0
  2782 ;;      Temps:          0       0       0       0       0       0       0
  2783 ;;      Totals:         0       5       0       0       0       0       0
  2784 ;;Total ram usage:        5 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    4
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_botaoAumentar
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text22
  2795  000D4A                     __ptext22:
  2796                           	opt stack 0
  2797  000D4A                     _mostraDisplay:
  2798                           	opt stack 22
  2799                           
  2800                           ;tasks.c: 177: PORTD=(dezena<<4)|(unidade);
  2801                           
  2802                           ;incstack = 0
  2803  000D4A  0100               	movlb	0	; () banked
  2804  000D4C  3995               	swapf	mostraDisplay@dezena& (0+255),w,b
  2805  000D4E  0BF0               	andlw	240
  2806  000D50  0100               	movlb	0	; () banked
  2807  000D52  1193               	iorwf	mostraDisplay@unidade& (0+255),w,b
  2808  000D54  6E83               	movwf	3971,c	;volatile
  2809                           
  2810                           ;tasks.c: 178: if(identificador=='1') PORTB=0b0000110;
  2811  000D56  0E31               	movlw	49
  2812  000D58  0100               	movlb	0	; () banked
  2813  000D5A  1997               	xorwf	mostraDisplay@identificador& (0+255),w,b
  2814  000D5C  A4D8               	btfss	status,2,c
  2815  000D5E  D002               	goto	i1l1631
  2816                           
  2817                           ; BSR set to: 0
  2818  000D60  0E06               	movlw	6
  2819  000D62  6E81               	movwf	3969,c	;volatile
  2820  000D64                     i1l1631:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;tasks.c: 180: if(identificador=='2') PORTB=0b1011011;
  2824  000D64  0E32               	movlw	50
  2825  000D66  0100               	movlb	0	; () banked
  2826  000D68  1997               	xorwf	mostraDisplay@identificador& (0+255),w,b
  2827  000D6A  A4D8               	btfss	status,2,c
  2828  000D6C  D002               	goto	i1l1635
  2829                           
  2830                           ; BSR set to: 0
  2831  000D6E  0E5B               	movlw	91
  2832  000D70  6E81               	movwf	3969,c	;volatile
  2833  000D72                     i1l1635:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;tasks.c: 182: if(identificador=='°') PORTB=0b1100011;
  2837  000D72  0EB0               	movlw	176
  2838  000D74  0100               	movlb	0	; () banked
  2839  000D76  1997               	xorwf	mostraDisplay@identificador& (0+255),w,b
  2840  000D78  A4D8               	btfss	status,2,c
  2841  000D7A  0012               	return	
  2842                           
  2843                           ; BSR set to: 0
  2844  000D7C  0E63               	movlw	99
  2845  000D7E  6E81               	movwf	3969,c	;volatile
  2846  000D80  0012               	return	
  2847  000D82                     __end_of_mostraDisplay:
  2848                           	opt stack 0
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           intcon	equ	0xFF2
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _timer_ISR *****************
  2865 ;; Defined at:
  2866 ;;		line 33 in file "../timer.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2880 ;;      Params:         0       0       0       0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0
  2882 ;;      Temps:         14       0       0       0       0       0       0
  2883 ;;      Totals:        14       0       0       0       0       0       0
  2884 ;;Total ram usage:       14 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    3
  2887 ;; This function calls:
  2888 ;;		_nojoDispatcher
  2889 ;;		_resetTimer
  2890 ;; This function is called by:
  2891 ;;		Interrupt level 2
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	intcode
  2896  000008                     __pintcode:
  2897                           	opt stack 0
  2898  000008                     _timer_ISR:
  2899                           	opt stack 22
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;incstack = 0
  2903  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2904  00000A  CFFA F061          	movff	pclath,??_timer_ISR
  2905  00000E  CFFB F062          	movff	pclatu,??_timer_ISR+1
  2906  000012  CFE9 F063          	movff	fsr0l,??_timer_ISR+2
  2907  000016  CFEA F064          	movff	fsr0h,??_timer_ISR+3
  2908  00001A  CFE1 F065          	movff	fsr1l,??_timer_ISR+4
  2909  00001E  CFE2 F066          	movff	fsr1h,??_timer_ISR+5
  2910  000022  CFD9 F067          	movff	fsr2l,??_timer_ISR+6
  2911  000026  CFDA F068          	movff	fsr2h,??_timer_ISR+7
  2912  00002A  CFF3 F069          	movff	prodl,??_timer_ISR+8
  2913  00002E  CFF4 F06A          	movff	prodh,??_timer_ISR+9
  2914  000032  CFF6 F06B          	movff	tblptrl,??_timer_ISR+10
  2915  000036  CFF7 F06C          	movff	tblptrh,??_timer_ISR+11
  2916  00003A  CFF8 F06D          	movff	tblptru,??_timer_ISR+12
  2917  00003E  CFF5 F06E          	movff	tablat,??_timer_ISR+13
  2918                           
  2919                           ;timer.c: 35: if(INTCONbits.T0IE && INTCONbits.T0IF){
  2920  000042  BAF2               	btfsc	intcon,5,c	;volatile
  2921  000044  A4F2               	btfss	intcon,2,c	;volatile
  2922  000046  D005               	goto	i2l311
  2923                           
  2924                           ;timer.c: 36: resetTimer();
  2925  000048  EC7D  F007         	call	_resetTimer	;wreg free
  2926                           
  2927                           ;timer.c: 37: nojoDispatcher(READY);
  2928  00004C  0E00               	movlw	0
  2929  00004E  EC49  F000         	call	_nojoDispatcher
  2930  000052                     i2l311:
  2931  000052  C06E  FFF5         	movff	??_timer_ISR+13,tablat
  2932  000056  C06D  FFF8         	movff	??_timer_ISR+12,tblptru
  2933  00005A  C06C  FFF7         	movff	??_timer_ISR+11,tblptrh
  2934  00005E  C06B  FFF6         	movff	??_timer_ISR+10,tblptrl
  2935  000062  C06A  FFF4         	movff	??_timer_ISR+9,prodh
  2936  000066  C069  FFF3         	movff	??_timer_ISR+8,prodl
  2937  00006A  C068  FFDA         	movff	??_timer_ISR+7,fsr2h
  2938  00006E  C067  FFD9         	movff	??_timer_ISR+6,fsr2l
  2939  000072  C066  FFE2         	movff	??_timer_ISR+5,fsr1h
  2940  000076  C065  FFE1         	movff	??_timer_ISR+4,fsr1l
  2941  00007A  C064  FFEA         	movff	??_timer_ISR+3,fsr0h
  2942  00007E  C063  FFE9         	movff	??_timer_ISR+2,fsr0l
  2943  000082  C062  FFFB         	movff	??_timer_ISR+1,pclatu
  2944  000086  C061  FFFA         	movff	??_timer_ISR,pclath
  2945  00008A  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2946  00008C  0011               	retfie		f
  2947  00008E                     __end_of_timer_ISR:
  2948                           	opt stack 0
  2949                           pclatu	equ	0xFFB
  2950                           pclath	equ	0xFFA
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           intcon	equ	0xFF2
  2958                           postinc0	equ	0xFEE
  2959                           fsr0h	equ	0xFEA
  2960                           fsr0l	equ	0xFE9
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _resetTimer *****************
  2973 ;; Defined at:
  2974 ;;		line 25 in file "../timer.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2988 ;;      Params:         0       0       0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0       0       0
  2991 ;;      Totals:         0       0       0       0       0       0       0
  2992 ;;Total ram usage:        0 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_timer_ISR
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text24
  3002  000EFA                     __ptext24:
  3003                           	opt stack 0
  3004  000EFA                     _resetTimer:
  3005                           	opt stack 24
  3006                           
  3007                           ;timer.c: 27: INTCONbits.TMR0IF = 0;
  3008                           
  3009                           ;incstack = 0
  3010  000EFA  94F2               	bcf	intcon,2,c	;volatile
  3011                           
  3012                           ;timer.c: 28: TMR0 = 64911;
  3013  000EFC  0EFD               	movlw	253
  3014  000EFE  6ED7               	movwf	4055,c	;volatile
  3015  000F00  0E8F               	movlw	143
  3016  000F02  6ED6               	movwf	4054,c	;volatile
  3017  000F04  0012               	return		;funcret
  3018  000F06                     __end_of_resetTimer:
  3019                           	opt stack 0
  3020                           pclatu	equ	0xFFB
  3021                           pclath	equ	0xFFA
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           prodh	equ	0xFF4
  3027                           prodl	equ	0xFF3
  3028                           intcon	equ	0xFF2
  3029                           postinc0	equ	0xFEE
  3030                           fsr0h	equ	0xFEA
  3031                           fsr0l	equ	0xFE9
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1h	equ	0xFE2
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _nojoDispatcher *****************
  3044 ;; Defined at:
  3045 ;;		line 38 in file "../kernel.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  state           1    wreg     enum E3131
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  state           1   32[COMRAM] enum E3131
  3050 ;;  task_pos        4   33[COMRAM] unsigned long 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      void 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3060 ;;      Params:         0       0       0       0       0       0       0
  3061 ;;      Locals:         5       0       0       0       0       0       0
  3062 ;;      Temps:          7       0       0       0       0       0       0
  3063 ;;      Totals:        12       0       0       0       0       0       0
  3064 ;;Total ram usage:       12 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    2
  3067 ;; This function calls:
  3068 ;;		_RR_scheduler
  3069 ;;		i2___wmul
  3070 ;; This function is called by:
  3071 ;;		_timer_ISR
  3072 ;;		_nojoDelay
  3073 ;;		_sem_wait
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text25
  3078  000092                     __ptext25:
  3079                           	opt stack 0
  3080  000092                     _nojoDispatcher:
  3081                           	opt stack 22
  3082                           
  3083                           ;incstack = 0
  3084                           ;nojoDispatcher@state stored from wreg
  3085  000092  6E5C               	movwf	nojoDispatcher@state,c
  3086                           
  3087                           ;kernel.c: 40: INTCONbits.GIE = 0;
  3088  000094  9EF2               	bcf	intcon,7,c	;volatile
  3089                           
  3090                           ;kernel.c: 41: POS_READY_QUEUE task_pos;
  3091                           ;kernel.c: 44: do{ asm("MOVWF _tWORK"); asm("MOVFF BSR, _tBSR"); asm("MOVFF STATUS, _tST
      +                          ATUS"); F_APTOS.FILA_APTOS[F_APTOS.task_running].task_CTX.ctx_WORK = tWORK; F_APTOS.FILA
      +                          _APTOS[F_APTOS.task_running].task_CTX.ctx_BSR = tBSR; F_APTOS.FILA_APTOS[F_APTOS.task_ru
      +                          n
  3092  000096  6F1F               	movwf	_tWORK,b	;# 
  3093  000098  CFE0 F01E          	movff	bsr,_tBSR	;# 
  3094  00009C  CFD8 F01D          	movff	status,_tSTATUS	;# 
  3095  0000A0  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3096  0000A4  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3097  0000A8  0E00               	movlw	0
  3098  0000AA  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3099  0000AC  0E70               	movlw	112
  3100  0000AE  6E3E               	movwf	i2___wmul@multiplicand,c
  3101  0000B0  EC2C  F007         	call	i2___wmul	;wreg free
  3102  0000B4  0E0B               	movlw	11
  3103  0000B6  263C               	addwf	?i2___wmul,f,c
  3104  0000B8  0E00               	movlw	0
  3105  0000BA  223D               	addwfc	?i2___wmul+1,f,c
  3106  0000BC  0EAD               	movlw	low _F_APTOS
  3107  0000BE  243C               	addwf	?i2___wmul,w,c
  3108  0000C0  6ED9               	movwf	fsr2l,c
  3109  0000C2  0E00               	movlw	high _F_APTOS
  3110  0000C4  203D               	addwfc	?i2___wmul+1,w,c
  3111  0000C6  6EDA               	movwf	fsr2h,c
  3112  0000C8  C01F  FFDF         	movff	_tWORK,indf2
  3113  0000CC  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3114  0000D0  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3115  0000D4  0E00               	movlw	0
  3116  0000D6  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3117  0000D8  0E70               	movlw	112
  3118  0000DA  6E3E               	movwf	i2___wmul@multiplicand,c
  3119  0000DC  EC2C  F007         	call	i2___wmul	;wreg free
  3120  0000E0  0E0C               	movlw	12
  3121  0000E2  263C               	addwf	?i2___wmul,f,c
  3122  0000E4  0E00               	movlw	0
  3123  0000E6  223D               	addwfc	?i2___wmul+1,f,c
  3124  0000E8  0EAD               	movlw	low _F_APTOS
  3125  0000EA  243C               	addwf	?i2___wmul,w,c
  3126  0000EC  6ED9               	movwf	fsr2l,c
  3127  0000EE  0E00               	movlw	high _F_APTOS
  3128  0000F0  203D               	addwfc	?i2___wmul+1,w,c
  3129  0000F2  6EDA               	movwf	fsr2h,c
  3130  0000F4  C01E  FFDF         	movff	_tBSR,indf2
  3131  0000F8  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3132  0000FC  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3133  000100  0E00               	movlw	0
  3134  000102  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3135  000104  0E70               	movlw	112
  3136  000106  6E3E               	movwf	i2___wmul@multiplicand,c
  3137  000108  EC2C  F007         	call	i2___wmul	;wreg free
  3138  00010C  0E0D               	movlw	13
  3139  00010E  263C               	addwf	?i2___wmul,f,c
  3140  000110  0E00               	movlw	0
  3141  000112  223D               	addwfc	?i2___wmul+1,f,c
  3142  000114  0EAD               	movlw	low _F_APTOS
  3143  000116  243C               	addwf	?i2___wmul,w,c
  3144  000118  6ED9               	movwf	fsr2l,c
  3145  00011A  0E00               	movlw	high _F_APTOS
  3146  00011C  203D               	addwfc	?i2___wmul+1,w,c
  3147  00011E  6EDA               	movwf	fsr2h,c
  3148  000120  C01D  FFDF         	movff	_tSTATUS,indf2
  3149  000124  D0D2               	goto	i2l1451
  3150  000126                     i2l1449:
  3151  000126  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3152  00012A  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3153  00012E  0E00               	movlw	0
  3154  000130  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3155  000132  0E70               	movlw	112
  3156  000134  6E3E               	movwf	i2___wmul@multiplicand,c
  3157  000136  EC2C  F007         	call	i2___wmul	;wreg free
  3158  00013A  0E12               	movlw	18
  3159  00013C  263C               	addwf	?i2___wmul,f,c
  3160  00013E  0E00               	movlw	0
  3161  000140  223D               	addwfc	?i2___wmul+1,f,c
  3162  000142  0EAD               	movlw	low _F_APTOS
  3163  000144  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3164  000146  0E00               	movlw	high _F_APTOS
  3165  000148  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3166  00014A  503C               	movf	?i2___wmul,w,c
  3167  00014C  2655               	addwf	??_nojoDispatcher,f,c
  3168  00014E  503D               	movf	?i2___wmul+1,w,c
  3169  000150  2256               	addwfc	??_nojoDispatcher+1,f,c
  3170  000152  EE22  F071         	lfsr	2,_F_APTOS+452
  3171  000156  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3172  00015A  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3173  00015E  0E70               	movlw	112
  3174  000160  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3175  000162  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3176  000166  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3177  00016A  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3178  00016C  50F3               	movf	prodl,w,c
  3179  00016E  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3180  000170  0E6F               	movlw	111
  3181  000172  2659               	addwf	??_nojoDispatcher+4,f,c
  3182  000174  0E00               	movlw	0
  3183  000176  225A               	addwfc	??_nojoDispatcher+5,f,c
  3184  000178  0EAD               	movlw	low _F_APTOS
  3185  00017A  2459               	addwf	??_nojoDispatcher+4,w,c
  3186  00017C  6ED9               	movwf	fsr2l,c
  3187  00017E  0E00               	movlw	high _F_APTOS
  3188  000180  205A               	addwfc	??_nojoDispatcher+5,w,c
  3189  000182  6EDA               	movwf	fsr2h,c
  3190  000184  50DF               	movf	indf2,w,c
  3191  000186  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3192  000188  505B               	movf	??_nojoDispatcher+6,w,c
  3193  00018A  0D03               	mullw	3
  3194  00018C  50F3               	movf	prodl,w,c
  3195  00018E  2655               	addwf	??_nojoDispatcher,f,c
  3196  000190  50F4               	movf	prodh,w,c
  3197  000192  2256               	addwfc	??_nojoDispatcher+1,f,c
  3198  000194  0E02               	movlw	2
  3199  000196  2455               	addwf	??_nojoDispatcher,w,c
  3200  000198  6ED9               	movwf	fsr2l,c
  3201  00019A  0E00               	movlw	0
  3202  00019C  2056               	addwfc	??_nojoDispatcher+1,w,c
  3203  00019E  6EDA               	movwf	fsr2h,c
  3204  0001A0  50DF               	movf	223,w,c
  3205  0001A2  18FF               	xorwf	tosu,w,c	;volatile
  3206  0001A4  0BE0               	andlw	-32
  3207  0001A6  18FF               	xorwf	tosu,w,c	;volatile
  3208  0001A8  6EDF               	movwf	223,c
  3209  0001AA  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3210  0001AE  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3211  0001B2  0E00               	movlw	0
  3212  0001B4  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3213  0001B6  0E70               	movlw	112
  3214  0001B8  6E3E               	movwf	i2___wmul@multiplicand,c
  3215  0001BA  EC2C  F007         	call	i2___wmul	;wreg free
  3216  0001BE  0E12               	movlw	18
  3217  0001C0  263C               	addwf	?i2___wmul,f,c
  3218  0001C2  0E00               	movlw	0
  3219  0001C4  223D               	addwfc	?i2___wmul+1,f,c
  3220  0001C6  0EAD               	movlw	low _F_APTOS
  3221  0001C8  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3222  0001CA  0E00               	movlw	high _F_APTOS
  3223  0001CC  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3224  0001CE  503C               	movf	?i2___wmul,w,c
  3225  0001D0  2655               	addwf	??_nojoDispatcher,f,c
  3226  0001D2  503D               	movf	?i2___wmul+1,w,c
  3227  0001D4  2256               	addwfc	??_nojoDispatcher+1,f,c
  3228  0001D6  EE22  F071         	lfsr	2,_F_APTOS+452
  3229  0001DA  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3230  0001DE  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3231  0001E2  0E70               	movlw	112
  3232  0001E4  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3233  0001E6  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3234  0001EA  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3235  0001EE  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3236  0001F0  50F3               	movf	prodl,w,c
  3237  0001F2  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3238  0001F4  0E6F               	movlw	111
  3239  0001F6  2659               	addwf	??_nojoDispatcher+4,f,c
  3240  0001F8  0E00               	movlw	0
  3241  0001FA  225A               	addwfc	??_nojoDispatcher+5,f,c
  3242  0001FC  0EAD               	movlw	low _F_APTOS
  3243  0001FE  2459               	addwf	??_nojoDispatcher+4,w,c
  3244  000200  6ED9               	movwf	fsr2l,c
  3245  000202  0E00               	movlw	high _F_APTOS
  3246  000204  205A               	addwfc	??_nojoDispatcher+5,w,c
  3247  000206  6EDA               	movwf	fsr2h,c
  3248  000208  50DF               	movf	indf2,w,c
  3249  00020A  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3250  00020C  505B               	movf	??_nojoDispatcher+6,w,c
  3251  00020E  0D03               	mullw	3
  3252  000210  50F3               	movf	prodl,w,c
  3253  000212  2455               	addwf	??_nojoDispatcher,w,c
  3254  000214  6ED9               	movwf	fsr2l,c
  3255  000216  50F4               	movf	prodh,w,c
  3256  000218  2056               	addwfc	??_nojoDispatcher+1,w,c
  3257  00021A  6EDA               	movwf	fsr2h,c
  3258  00021C  CFFD FFDF          	movff	tosl,indf2	;volatile
  3259  000220  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3260  000224  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3261  000228  0E00               	movlw	0
  3262  00022A  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3263  00022C  0E70               	movlw	112
  3264  00022E  6E3E               	movwf	i2___wmul@multiplicand,c
  3265  000230  EC2C  F007         	call	i2___wmul	;wreg free
  3266  000234  0E12               	movlw	18
  3267  000236  263C               	addwf	?i2___wmul,f,c
  3268  000238  0E00               	movlw	0
  3269  00023A  223D               	addwfc	?i2___wmul+1,f,c
  3270  00023C  0EAD               	movlw	low _F_APTOS
  3271  00023E  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3272  000240  0E00               	movlw	high _F_APTOS
  3273  000242  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3274  000244  503C               	movf	?i2___wmul,w,c
  3275  000246  2655               	addwf	??_nojoDispatcher,f,c
  3276  000248  503D               	movf	?i2___wmul+1,w,c
  3277  00024A  2256               	addwfc	??_nojoDispatcher+1,f,c
  3278  00024C  EE22  F071         	lfsr	2,_F_APTOS+452
  3279  000250  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3280  000254  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3281  000258  0E70               	movlw	112
  3282  00025A  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3283  00025C  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3284  000260  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3285  000264  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3286  000266  50F3               	movf	prodl,w,c
  3287  000268  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3288  00026A  0E6F               	movlw	111
  3289  00026C  2659               	addwf	??_nojoDispatcher+4,f,c
  3290  00026E  0E00               	movlw	0
  3291  000270  225A               	addwfc	??_nojoDispatcher+5,f,c
  3292  000272  0EAD               	movlw	low _F_APTOS
  3293  000274  2459               	addwf	??_nojoDispatcher+4,w,c
  3294  000276  6ED9               	movwf	fsr2l,c
  3295  000278  0E00               	movlw	high _F_APTOS
  3296  00027A  205A               	addwfc	??_nojoDispatcher+5,w,c
  3297  00027C  6EDA               	movwf	fsr2h,c
  3298  00027E  50DF               	movf	indf2,w,c
  3299  000280  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3300  000282  505B               	movf	??_nojoDispatcher+6,w,c
  3301  000284  0D03               	mullw	3
  3302  000286  50F3               	movf	prodl,w,c
  3303  000288  2655               	addwf	??_nojoDispatcher,f,c
  3304  00028A  50F4               	movf	prodh,w,c
  3305  00028C  2256               	addwfc	??_nojoDispatcher+1,f,c
  3306  00028E  0E01               	movlw	1
  3307  000290  2455               	addwf	??_nojoDispatcher,w,c
  3308  000292  6ED9               	movwf	fsr2l,c
  3309  000294  0E00               	movlw	0
  3310  000296  2056               	addwfc	??_nojoDispatcher+1,w,c
  3311  000298  6EDA               	movwf	fsr2h,c
  3312  00029A  CFFE FFDF          	movff	tosh,indf2	;volatile
  3313  00029E  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3314  0002A2  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3315  0002A6  0E00               	movlw	0
  3316  0002A8  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3317  0002AA  0E70               	movlw	112
  3318  0002AC  6E3E               	movwf	i2___wmul@multiplicand,c
  3319  0002AE  EC2C  F007         	call	i2___wmul	;wreg free
  3320  0002B2  0E6F               	movlw	111
  3321  0002B4  263C               	addwf	?i2___wmul,f,c
  3322  0002B6  0E00               	movlw	0
  3323  0002B8  223D               	addwfc	?i2___wmul+1,f,c
  3324  0002BA  0EAD               	movlw	low _F_APTOS
  3325  0002BC  243C               	addwf	?i2___wmul,w,c
  3326  0002BE  6ED9               	movwf	fsr2l,c
  3327  0002C0  0E00               	movlw	high _F_APTOS
  3328  0002C2  203D               	addwfc	?i2___wmul+1,w,c
  3329  0002C4  6EDA               	movwf	fsr2h,c
  3330  0002C6  2ADF               	incf	indf2,f,c
  3331  0002C8  0006               	pop		;# 
  3332  0002CA                     i2l1451:
  3333  0002CA  50FC               	movf	stkptr,w,c	;volatile
  3334  0002CC  A4D8               	btfss	status,2,c
  3335  0002CE  D72B               	goto	i2l1449
  3336                           
  3337                           ;kernel.c: 46: F_APTOS.FILA_APTOS[F_APTOS.task_running].task_STATE = state;
  3338  0002D0  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3339  0002D4  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3340  0002D8  0E00               	movlw	0
  3341  0002DA  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3342  0002DC  0E70               	movlw	112
  3343  0002DE  6E3E               	movwf	i2___wmul@multiplicand,c
  3344  0002E0  EC2C  F007         	call	i2___wmul	;wreg free
  3345  0002E4  0E08               	movlw	8
  3346  0002E6  263C               	addwf	?i2___wmul,f,c
  3347  0002E8  0E00               	movlw	0
  3348  0002EA  223D               	addwfc	?i2___wmul+1,f,c
  3349  0002EC  0EAD               	movlw	low _F_APTOS
  3350  0002EE  243C               	addwf	?i2___wmul,w,c
  3351  0002F0  6ED9               	movwf	fsr2l,c
  3352  0002F2  0E00               	movlw	high _F_APTOS
  3353  0002F4  203D               	addwfc	?i2___wmul+1,w,c
  3354  0002F6  6EDA               	movwf	fsr2h,c
  3355  0002F8  C05C  FFDF         	movff	nojoDispatcher@state,indf2
  3356                           
  3357                           ;kernel.c: 50: task_pos = RR_scheduler();
  3358  0002FC  ECF0  F003         	call	_RR_scheduler	;wreg free
  3359  000300  C045  F05D         	movff	?_RR_scheduler,nojoDispatcher@task_pos
  3360  000304  C046  F05E         	movff	?_RR_scheduler+1,nojoDispatcher@task_pos+1
  3361  000308  C047  F05F         	movff	?_RR_scheduler+2,nojoDispatcher@task_pos+2
  3362  00030C  C048  F060         	movff	?_RR_scheduler+3,nojoDispatcher@task_pos+3
  3363                           
  3364                           ;kernel.c: 56: F_APTOS.task_running = task_pos;
  3365  000310  C05D  F271         	movff	nojoDispatcher@task_pos,_F_APTOS+452
  3366  000314  C05E  F272         	movff	nojoDispatcher@task_pos+1,_F_APTOS+453
  3367  000318  C05F  F273         	movff	nojoDispatcher@task_pos+2,_F_APTOS+454
  3368  00031C  C060  F274         	movff	nojoDispatcher@task_pos+3,_F_APTOS+455
  3369                           
  3370                           ;kernel.c: 57: F_APTOS.FILA_APTOS[task_pos].task_STATE = RUNNING;
  3371  000320  C05D  F03C         	movff	nojoDispatcher@task_pos,i2___wmul@multiplier
  3372  000324  C05E  F03D         	movff	nojoDispatcher@task_pos+1,i2___wmul@multiplier+1
  3373  000328  0E00               	movlw	0
  3374  00032A  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3375  00032C  0E70               	movlw	112
  3376  00032E  6E3E               	movwf	i2___wmul@multiplicand,c
  3377  000330  EC2C  F007         	call	i2___wmul	;wreg free
  3378  000334  0E08               	movlw	8
  3379  000336  263C               	addwf	?i2___wmul,f,c
  3380  000338  0E00               	movlw	0
  3381  00033A  223D               	addwfc	?i2___wmul+1,f,c
  3382  00033C  0EAD               	movlw	low _F_APTOS
  3383  00033E  243C               	addwf	?i2___wmul,w,c
  3384  000340  6ED9               	movwf	fsr2l,c
  3385  000342  0E00               	movlw	high _F_APTOS
  3386  000344  203D               	addwfc	?i2___wmul+1,w,c
  3387  000346  6EDA               	movwf	fsr2h,c
  3388  000348  0E01               	movlw	1
  3389  00034A  6EDF               	movwf	indf2,c
  3390                           
  3391                           ;kernel.c: 59: do{ STKPTR = 0; tWORK = F_APTOS.FILA_APTOS[F_APTOS.task_running].task_CTX
      +                          .ctx_WORK; tBSR = F_APTOS.FILA_APTOS[F_APTOS.task_running].task_CTX.ctx_BSR; tSTATUS = F
      +                          _APTOS.FILA_APTOS[F_APTOS.task_running].task_CTX.ctx_STATUS; while (F_APTOS.FILA_APTOS[F
      +                          _
  3392  00034C  0E00               	movlw	0
  3393  00034E  6EFC               	movwf	stkptr,c	;volatile
  3394  000350  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3395  000354  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3396  000358  0E00               	movlw	0
  3397  00035A  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3398  00035C  0E70               	movlw	112
  3399  00035E  6E3E               	movwf	i2___wmul@multiplicand,c
  3400  000360  EC2C  F007         	call	i2___wmul	;wreg free
  3401  000364  0E0B               	movlw	11
  3402  000366  263C               	addwf	?i2___wmul,f,c
  3403  000368  0E00               	movlw	0
  3404  00036A  223D               	addwfc	?i2___wmul+1,f,c
  3405  00036C  0EAD               	movlw	low _F_APTOS
  3406  00036E  243C               	addwf	?i2___wmul,w,c
  3407  000370  6ED9               	movwf	fsr2l,c
  3408  000372  0E00               	movlw	high _F_APTOS
  3409  000374  203D               	addwfc	?i2___wmul+1,w,c
  3410  000376  6EDA               	movwf	fsr2h,c
  3411  000378  50DF               	movf	indf2,w,c
  3412  00037A  6E1F               	movwf	_tWORK,c
  3413  00037C  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3414  000380  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3415  000384  0E00               	movlw	0
  3416  000386  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3417  000388  0E70               	movlw	112
  3418  00038A  6E3E               	movwf	i2___wmul@multiplicand,c
  3419  00038C  EC2C  F007         	call	i2___wmul	;wreg free
  3420  000390  0E0C               	movlw	12
  3421  000392  263C               	addwf	?i2___wmul,f,c
  3422  000394  0E00               	movlw	0
  3423  000396  223D               	addwfc	?i2___wmul+1,f,c
  3424  000398  0EAD               	movlw	low _F_APTOS
  3425  00039A  243C               	addwf	?i2___wmul,w,c
  3426  00039C  6ED9               	movwf	fsr2l,c
  3427  00039E  0E00               	movlw	high _F_APTOS
  3428  0003A0  203D               	addwfc	?i2___wmul+1,w,c
  3429  0003A2  6EDA               	movwf	fsr2h,c
  3430  0003A4  50DF               	movf	indf2,w,c
  3431  0003A6  6E1E               	movwf	_tBSR,c
  3432  0003A8  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3433  0003AC  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3434  0003B0  0E00               	movlw	0
  3435  0003B2  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3436  0003B4  0E70               	movlw	112
  3437  0003B6  6E3E               	movwf	i2___wmul@multiplicand,c
  3438  0003B8  EC2C  F007         	call	i2___wmul	;wreg free
  3439  0003BC  0E0D               	movlw	13
  3440  0003BE  263C               	addwf	?i2___wmul,f,c
  3441  0003C0  0E00               	movlw	0
  3442  0003C2  223D               	addwfc	?i2___wmul+1,f,c
  3443  0003C4  0EAD               	movlw	low _F_APTOS
  3444  0003C6  243C               	addwf	?i2___wmul,w,c
  3445  0003C8  6ED9               	movwf	fsr2l,c
  3446  0003CA  0E00               	movlw	high _F_APTOS
  3447  0003CC  203D               	addwfc	?i2___wmul+1,w,c
  3448  0003CE  6EDA               	movwf	fsr2h,c
  3449  0003D0  50DF               	movf	indf2,w,c
  3450  0003D2  6E1D               	movwf	_tSTATUS,c
  3451  0003D4  D0D0               	goto	i2l93
  3452  0003D6                     i2l94:
  3453  0003D6  0005               	push		;# 
  3454  0003D8  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3455  0003DC  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3456  0003E0  0E00               	movlw	0
  3457  0003E2  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3458  0003E4  0E70               	movlw	112
  3459  0003E6  6E3E               	movwf	i2___wmul@multiplicand,c
  3460  0003E8  EC2C  F007         	call	i2___wmul	;wreg free
  3461  0003EC  0E6F               	movlw	111
  3462  0003EE  263C               	addwf	?i2___wmul,f,c
  3463  0003F0  0E00               	movlw	0
  3464  0003F2  223D               	addwfc	?i2___wmul+1,f,c
  3465  0003F4  0EAD               	movlw	low _F_APTOS
  3466  0003F6  243C               	addwf	?i2___wmul,w,c
  3467  0003F8  6ED9               	movwf	fsr2l,c
  3468  0003FA  0E00               	movlw	high _F_APTOS
  3469  0003FC  203D               	addwfc	?i2___wmul+1,w,c
  3470  0003FE  6EDA               	movwf	fsr2h,c
  3471  000400  06DF               	decf	indf2,f,c
  3472  000402  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3473  000406  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3474  00040A  0E00               	movlw	0
  3475  00040C  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3476  00040E  0E70               	movlw	112
  3477  000410  6E3E               	movwf	i2___wmul@multiplicand,c
  3478  000412  EC2C  F007         	call	i2___wmul	;wreg free
  3479  000416  0E12               	movlw	18
  3480  000418  263C               	addwf	?i2___wmul,f,c
  3481  00041A  0E00               	movlw	0
  3482  00041C  223D               	addwfc	?i2___wmul+1,f,c
  3483  00041E  0EAD               	movlw	low _F_APTOS
  3484  000420  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3485  000422  0E00               	movlw	high _F_APTOS
  3486  000424  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3487  000426  503C               	movf	?i2___wmul,w,c
  3488  000428  2655               	addwf	??_nojoDispatcher,f,c
  3489  00042A  503D               	movf	?i2___wmul+1,w,c
  3490  00042C  2256               	addwfc	??_nojoDispatcher+1,f,c
  3491  00042E  EE22  F071         	lfsr	2,_F_APTOS+452
  3492  000432  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3493  000436  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3494  00043A  0E70               	movlw	112
  3495  00043C  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3496  00043E  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3497  000442  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3498  000446  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3499  000448  50F3               	movf	prodl,w,c
  3500  00044A  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3501  00044C  0E6F               	movlw	111
  3502  00044E  2659               	addwf	??_nojoDispatcher+4,f,c
  3503  000450  0E00               	movlw	0
  3504  000452  225A               	addwfc	??_nojoDispatcher+5,f,c
  3505  000454  0EAD               	movlw	low _F_APTOS
  3506  000456  2459               	addwf	??_nojoDispatcher+4,w,c
  3507  000458  6ED9               	movwf	fsr2l,c
  3508  00045A  0E00               	movlw	high _F_APTOS
  3509  00045C  205A               	addwfc	??_nojoDispatcher+5,w,c
  3510  00045E  6EDA               	movwf	fsr2h,c
  3511  000460  50DF               	movf	indf2,w,c
  3512  000462  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3513  000464  505B               	movf	??_nojoDispatcher+6,w,c
  3514  000466  0D03               	mullw	3
  3515  000468  50F3               	movf	prodl,w,c
  3516  00046A  2655               	addwf	??_nojoDispatcher,f,c
  3517  00046C  50F4               	movf	prodh,w,c
  3518  00046E  2256               	addwfc	??_nojoDispatcher+1,f,c
  3519  000470  0E02               	movlw	2
  3520  000472  2455               	addwf	??_nojoDispatcher,w,c
  3521  000474  6ED9               	movwf	fsr2l,c
  3522  000476  0E00               	movlw	0
  3523  000478  2056               	addwfc	??_nojoDispatcher+1,w,c
  3524  00047A  6EDA               	movwf	fsr2h,c
  3525  00047C  50DF               	movf	223,w,c
  3526  00047E  0B1F               	andlw	31
  3527  000480  6EFF               	movwf	tosu,c	;volatile
  3528  000482  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3529  000486  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3530  00048A  0E00               	movlw	0
  3531  00048C  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3532  00048E  0E70               	movlw	112
  3533  000490  6E3E               	movwf	i2___wmul@multiplicand,c
  3534  000492  EC2C  F007         	call	i2___wmul	;wreg free
  3535  000496  0E12               	movlw	18
  3536  000498  263C               	addwf	?i2___wmul,f,c
  3537  00049A  0E00               	movlw	0
  3538  00049C  223D               	addwfc	?i2___wmul+1,f,c
  3539  00049E  0EAD               	movlw	low _F_APTOS
  3540  0004A0  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3541  0004A2  0E00               	movlw	high _F_APTOS
  3542  0004A4  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3543  0004A6  503C               	movf	?i2___wmul,w,c
  3544  0004A8  2655               	addwf	??_nojoDispatcher,f,c
  3545  0004AA  503D               	movf	?i2___wmul+1,w,c
  3546  0004AC  2256               	addwfc	??_nojoDispatcher+1,f,c
  3547  0004AE  EE22  F071         	lfsr	2,_F_APTOS+452
  3548  0004B2  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3549  0004B6  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3550  0004BA  0E70               	movlw	112
  3551  0004BC  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3552  0004BE  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3553  0004C2  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3554  0004C6  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3555  0004C8  50F3               	movf	prodl,w,c
  3556  0004CA  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3557  0004CC  0E6F               	movlw	111
  3558  0004CE  2659               	addwf	??_nojoDispatcher+4,f,c
  3559  0004D0  0E00               	movlw	0
  3560  0004D2  225A               	addwfc	??_nojoDispatcher+5,f,c
  3561  0004D4  0EAD               	movlw	low _F_APTOS
  3562  0004D6  2459               	addwf	??_nojoDispatcher+4,w,c
  3563  0004D8  6ED9               	movwf	fsr2l,c
  3564  0004DA  0E00               	movlw	high _F_APTOS
  3565  0004DC  205A               	addwfc	??_nojoDispatcher+5,w,c
  3566  0004DE  6EDA               	movwf	fsr2h,c
  3567  0004E0  50DF               	movf	indf2,w,c
  3568  0004E2  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3569  0004E4  505B               	movf	??_nojoDispatcher+6,w,c
  3570  0004E6  0D03               	mullw	3
  3571  0004E8  50F3               	movf	prodl,w,c
  3572  0004EA  2655               	addwf	??_nojoDispatcher,f,c
  3573  0004EC  50F4               	movf	prodh,w,c
  3574  0004EE  2256               	addwfc	??_nojoDispatcher+1,f,c
  3575  0004F0  0E01               	movlw	1
  3576  0004F2  2455               	addwf	??_nojoDispatcher,w,c
  3577  0004F4  6ED9               	movwf	fsr2l,c
  3578  0004F6  0E00               	movlw	0
  3579  0004F8  2056               	addwfc	??_nojoDispatcher+1,w,c
  3580  0004FA  6EDA               	movwf	fsr2h,c
  3581  0004FC  50DF               	movf	indf2,w,c
  3582  0004FE  6EFE               	movwf	tosh,c	;volatile
  3583  000500  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3584  000504  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3585  000508  0E00               	movlw	0
  3586  00050A  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3587  00050C  0E70               	movlw	112
  3588  00050E  6E3E               	movwf	i2___wmul@multiplicand,c
  3589  000510  EC2C  F007         	call	i2___wmul	;wreg free
  3590  000514  0E12               	movlw	18
  3591  000516  263C               	addwf	?i2___wmul,f,c
  3592  000518  0E00               	movlw	0
  3593  00051A  223D               	addwfc	?i2___wmul+1,f,c
  3594  00051C  0EAD               	movlw	low _F_APTOS
  3595  00051E  6E55               	movwf	??_nojoDispatcher& (0+255),c
  3596  000520  0E00               	movlw	high _F_APTOS
  3597  000522  6E56               	movwf	(??_nojoDispatcher+1)& (0+255),c
  3598  000524  503C               	movf	?i2___wmul,w,c
  3599  000526  2655               	addwf	??_nojoDispatcher,f,c
  3600  000528  503D               	movf	?i2___wmul+1,w,c
  3601  00052A  2256               	addwfc	??_nojoDispatcher+1,f,c
  3602  00052C  EE22  F071         	lfsr	2,_F_APTOS+452
  3603  000530  CFDE F057          	movff	postinc2,??_nojoDispatcher+2
  3604  000534  CFDD F058          	movff	postdec2,??_nojoDispatcher+3
  3605  000538  0E70               	movlw	112
  3606  00053A  0257               	mulwf	(??_nojoDispatcher+2)& (0+255),c
  3607  00053C  CFF3 F059          	movff	prodl,??_nojoDispatcher+4
  3608  000540  CFF4 F05A          	movff	prodh,??_nojoDispatcher+5
  3609  000544  0258               	mulwf	(??_nojoDispatcher+3)& (0+255),c
  3610  000546  50F3               	movf	prodl,w,c
  3611  000548  265A               	addwf	(??_nojoDispatcher+5)& (0+255),f,c
  3612  00054A  0E6F               	movlw	111
  3613  00054C  2659               	addwf	??_nojoDispatcher+4,f,c
  3614  00054E  0E00               	movlw	0
  3615  000550  225A               	addwfc	??_nojoDispatcher+5,f,c
  3616  000552  0EAD               	movlw	low _F_APTOS
  3617  000554  2459               	addwf	??_nojoDispatcher+4,w,c
  3618  000556  6ED9               	movwf	fsr2l,c
  3619  000558  0E00               	movlw	high _F_APTOS
  3620  00055A  205A               	addwfc	??_nojoDispatcher+5,w,c
  3621  00055C  6EDA               	movwf	fsr2h,c
  3622  00055E  50DF               	movf	indf2,w,c
  3623  000560  6E5B               	movwf	(??_nojoDispatcher+6)& (0+255),c
  3624  000562  505B               	movf	??_nojoDispatcher+6,w,c
  3625  000564  0D03               	mullw	3
  3626  000566  50F3               	movf	prodl,w,c
  3627  000568  2455               	addwf	??_nojoDispatcher,w,c
  3628  00056A  6ED9               	movwf	fsr2l,c
  3629  00056C  50F4               	movf	prodh,w,c
  3630  00056E  2056               	addwfc	??_nojoDispatcher+1,w,c
  3631  000570  6EDA               	movwf	fsr2h,c
  3632  000572  50DF               	movf	indf2,w,c
  3633  000574  6EFD               	movwf	tosl,c	;volatile
  3634  000576                     i2l93:
  3635  000576  C271  F03C         	movff	_F_APTOS+452,i2___wmul@multiplier
  3636  00057A  C272  F03D         	movff	_F_APTOS+453,i2___wmul@multiplier+1
  3637  00057E  0E00               	movlw	0
  3638  000580  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3639  000582  0E70               	movlw	112
  3640  000584  6E3E               	movwf	i2___wmul@multiplicand,c
  3641  000586  EC2C  F007         	call	i2___wmul	;wreg free
  3642  00058A  0E6F               	movlw	111
  3643  00058C  263C               	addwf	?i2___wmul,f,c
  3644  00058E  0E00               	movlw	0
  3645  000590  223D               	addwfc	?i2___wmul+1,f,c
  3646  000592  0EAD               	movlw	low _F_APTOS
  3647  000594  243C               	addwf	?i2___wmul,w,c
  3648  000596  6ED9               	movwf	fsr2l,c
  3649  000598  0E00               	movlw	high _F_APTOS
  3650  00059A  203D               	addwfc	?i2___wmul+1,w,c
  3651  00059C  6EDA               	movwf	fsr2h,c
  3652  00059E  50DF               	movf	indf2,w,c
  3653  0005A0  A4D8               	btfss	status,2,c
  3654  0005A2  D719               	goto	i2l94
  3655  0005A4  C01E  FFE0         	movff	_tBSR,bsr	;# 
  3656  0005A8  C01D  FFD8         	movff	_tSTATUS,status	;# 
  3657  0005AC  531F               	movf	_tWORK,f,b	;# 
  3658                           
  3659                           ;kernel.c: 60: INTCONbits.GIE = 1;
  3660  0005AE  8EF2               	bsf	intcon,7,c	;volatile
  3661  0005B0  0012               	return		;funcret
  3662  0005B2                     __end_of_nojoDispatcher:
  3663                           	opt stack 0
  3664                           tosu	equ	0xFFF
  3665                           tosh	equ	0xFFE
  3666                           tosl	equ	0xFFD
  3667                           stkptr	equ	0xFFC
  3668                           pclatu	equ	0xFFB
  3669                           pclath	equ	0xFFA
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           postinc0	equ	0xFEE
  3678                           fsr0h	equ	0xFEA
  3679                           fsr0l	equ	0xFE9
  3680                           wreg	equ	0xFE8
  3681                           postdec1	equ	0xFE5
  3682                           fsr1h	equ	0xFE2
  3683                           fsr1l	equ	0xFE1
  3684                           bsr	equ	0xFE0
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _RR_scheduler *****************
  3693 ;; Defined at:
  3694 ;;		line 18 in file "../scheduler.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  pos_next_tas    4   21[COMRAM] unsigned long 
  3699 ;;  i               4   17[COMRAM] unsigned long 
  3700 ;;  installed       4   13[COMRAM] unsigned long 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  4    9[COMRAM] unsigned long 
  3703 ;; Registers used:
  3704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3710 ;;      Params:         4       0       0       0       0       0       0
  3711 ;;      Locals:        12       0       0       0       0       0       0
  3712 ;;      Temps:          0       0       0       0       0       0       0
  3713 ;;      Totals:        16       0       0       0       0       0       0
  3714 ;;Total ram usage:       16 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    1
  3717 ;; This function calls:
  3718 ;;		___llmod
  3719 ;;		i2___wmul
  3720 ;; This function is called by:
  3721 ;;		_nojoDispatcher
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text26
  3726  0007E0                     __ptext26:
  3727                           	opt stack 0
  3728  0007E0                     _RR_scheduler:
  3729                           	opt stack 22
  3730                           
  3731                           ;scheduler.c: 20: u_int i = F_APTOS.task_running, pos_next_task = 0, installed = F_APTOS
      +                          .tasks_installed;
  3732                           
  3733                           ;incstack = 0
  3734  0007E0  C271  F04D         	movff	_F_APTOS+452,RR_scheduler@i
  3735  0007E4  C272  F04E         	movff	_F_APTOS+453,RR_scheduler@i+1
  3736  0007E8  C273  F04F         	movff	_F_APTOS+454,RR_scheduler@i+2
  3737  0007EC  C274  F050         	movff	_F_APTOS+455,RR_scheduler@i+3
  3738  0007F0  0E00               	movlw	0
  3739  0007F2  6E51               	movwf	RR_scheduler@pos_next_task,c
  3740  0007F4  0E00               	movlw	0
  3741  0007F6  6E52               	movwf	RR_scheduler@pos_next_task+1,c
  3742  0007F8  0E00               	movlw	0
  3743  0007FA  6E53               	movwf	RR_scheduler@pos_next_task+2,c
  3744  0007FC  0E00               	movlw	0
  3745  0007FE  6E54               	movwf	RR_scheduler@pos_next_task+3,c
  3746  000800  C26D  F049         	movff	_F_APTOS+448,RR_scheduler@installed
  3747  000804  C26E  F04A         	movff	_F_APTOS+449,RR_scheduler@installed+1
  3748  000808  C26F  F04B         	movff	_F_APTOS+450,RR_scheduler@installed+2
  3749  00080C  C270  F04C         	movff	_F_APTOS+451,RR_scheduler@installed+3
  3750  000810                     i2l1359:
  3751                           
  3752                           ;scheduler.c: 23: i++;
  3753  000810  0E01               	movlw	1
  3754  000812  264D               	addwf	RR_scheduler@i,f,c
  3755  000814  0E00               	movlw	0
  3756  000816  224E               	addwfc	RR_scheduler@i+1,f,c
  3757  000818  224F               	addwfc	RR_scheduler@i+2,f,c
  3758  00081A  2250               	addwfc	RR_scheduler@i+3,f,c
  3759                           
  3760                           ;scheduler.c: 24: pos_next_task = i % (installed);
  3761  00081C  C04D  F03C         	movff	RR_scheduler@i,___llmod@dividend
  3762  000820  C04E  F03D         	movff	RR_scheduler@i+1,___llmod@dividend+1
  3763  000824  C04F  F03E         	movff	RR_scheduler@i+2,___llmod@dividend+2
  3764  000828  C050  F03F         	movff	RR_scheduler@i+3,___llmod@dividend+3
  3765  00082C  C049  F040         	movff	RR_scheduler@installed,___llmod@divisor
  3766  000830  C04A  F041         	movff	RR_scheduler@installed+1,___llmod@divisor+1
  3767  000834  C04B  F042         	movff	RR_scheduler@installed+2,___llmod@divisor+2
  3768  000838  C04C  F043         	movff	RR_scheduler@installed+3,___llmod@divisor+3
  3769  00083C  EC2B  F006         	call	___llmod	;wreg free
  3770  000840  C03C  F051         	movff	?___llmod,RR_scheduler@pos_next_task
  3771  000844  C03D  F052         	movff	?___llmod+1,RR_scheduler@pos_next_task+1
  3772  000848  C03E  F053         	movff	?___llmod+2,RR_scheduler@pos_next_task+2
  3773  00084C  C03F  F054         	movff	?___llmod+3,RR_scheduler@pos_next_task+3
  3774                           
  3775                           ;scheduler.c: 25: }while (F_APTOS.FILA_APTOS[pos_next_task].task_STATE != READY);
  3776  000850  C051  F03C         	movff	RR_scheduler@pos_next_task,i2___wmul@multiplier
  3777  000854  C052  F03D         	movff	RR_scheduler@pos_next_task+1,i2___wmul@multiplier+1
  3778  000858  0E00               	movlw	0
  3779  00085A  6E3F               	movwf	i2___wmul@multiplicand+1,c
  3780  00085C  0E70               	movlw	112
  3781  00085E  6E3E               	movwf	i2___wmul@multiplicand,c
  3782  000860  EC2C  F007         	call	i2___wmul	;wreg free
  3783  000864  0E08               	movlw	8
  3784  000866  263C               	addwf	?i2___wmul,f,c
  3785  000868  0E00               	movlw	0
  3786  00086A  223D               	addwfc	?i2___wmul+1,f,c
  3787  00086C  0EAD               	movlw	low _F_APTOS
  3788  00086E  243C               	addwf	?i2___wmul,w,c
  3789  000870  6ED9               	movwf	fsr2l,c
  3790  000872  0E00               	movlw	high _F_APTOS
  3791  000874  203D               	addwfc	?i2___wmul+1,w,c
  3792  000876  6EDA               	movwf	fsr2h,c
  3793  000878  50DF               	movf	indf2,w,c
  3794  00087A  A4D8               	btfss	status,2,c
  3795  00087C  D7C9               	goto	i2l1359
  3796                           
  3797                           ;scheduler.c: 27: return pos_next_task;
  3798  00087E  C051  F045         	movff	RR_scheduler@pos_next_task,?_RR_scheduler
  3799  000882  C052  F046         	movff	RR_scheduler@pos_next_task+1,?_RR_scheduler+1
  3800  000886  C053  F047         	movff	RR_scheduler@pos_next_task+2,?_RR_scheduler+2
  3801  00088A  C054  F048         	movff	RR_scheduler@pos_next_task+3,?_RR_scheduler+3
  3802  00088E  0012               	return		;funcret
  3803  000890                     __end_of_RR_scheduler:
  3804                           	opt stack 0
  3805                           tosu	equ	0xFFF
  3806                           tosh	equ	0xFFE
  3807                           tosl	equ	0xFFD
  3808                           stkptr	equ	0xFFC
  3809                           pclatu	equ	0xFFB
  3810                           pclath	equ	0xFFA
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           intcon	equ	0xFF2
  3818                           postinc0	equ	0xFEE
  3819                           fsr0h	equ	0xFEA
  3820                           fsr0l	equ	0xFE9
  3821                           wreg	equ	0xFE8
  3822                           postdec1	equ	0xFE5
  3823                           fsr1h	equ	0xFE2
  3824                           fsr1l	equ	0xFE1
  3825                           bsr	equ	0xFE0
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function i2___wmul *****************
  3834 ;; Defined at:
  3835 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  multiplier      2    0[COMRAM] unsigned int 
  3838 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  __wmul          2    4[COMRAM] unsigned int 
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  2    0[COMRAM] unsigned int 
  3843 ;; Registers used:
  3844 ;;		wreg, status,2, status,0, prodl, prodh
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3850 ;;      Params:         4       0       0       0       0       0       0
  3851 ;;      Locals:         2       0       0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0
  3853 ;;      Totals:         6       0       0       0       0       0       0
  3854 ;;Total ram usage:        6 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_nojoDispatcher
  3860 ;;		_RR_scheduler
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text27
  3865  000E58                     __ptext27:
  3866                           	opt stack 0
  3867  000E58                     i2___wmul:
  3868                           	opt stack 23
  3869                           
  3870                           ;incstack = 0
  3871  000E58  503C               	movf	i2___wmul@multiplier,w,c
  3872  000E5A  023E               	mulwf	i2___wmul@multiplicand,c
  3873  000E5C  CFF3 F040          	movff	prodl,i2___wmul@product
  3874  000E60  CFF4 F041          	movff	prodh,i2___wmul@product+1
  3875  000E64  503C               	movf	i2___wmul@multiplier,w,c
  3876  000E66  023F               	mulwf	i2___wmul@multiplicand+1,c
  3877  000E68  50F3               	movf	prodl,w,c
  3878  000E6A  2641               	addwf	i2___wmul@product+1,f,c
  3879  000E6C  503D               	movf	i2___wmul@multiplier+1,w,c
  3880  000E6E  023E               	mulwf	i2___wmul@multiplicand,c
  3881  000E70  50F3               	movf	prodl,w,c
  3882  000E72  2641               	addwf	i2___wmul@product+1,f,c
  3883  000E74  C040  F03C         	movff	i2___wmul@product,?i2___wmul
  3884  000E78  C041  F03D         	movff	i2___wmul@product+1,?i2___wmul+1
  3885  000E7C  0012               	return	
  3886  000E7E                     __end_ofi2___wmul:
  3887                           	opt stack 0
  3888                           tosu	equ	0xFFF
  3889                           tosh	equ	0xFFE
  3890                           tosl	equ	0xFFD
  3891                           stkptr	equ	0xFFC
  3892                           pclatu	equ	0xFFB
  3893                           pclath	equ	0xFFA
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           intcon	equ	0xFF2
  3901                           postinc0	equ	0xFEE
  3902                           fsr0h	equ	0xFEA
  3903                           fsr0l	equ	0xFE9
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1h	equ	0xFE2
  3907                           fsr1l	equ	0xFE1
  3908                           bsr	equ	0xFE0
  3909                           indf2	equ	0xFDF
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function ___llmod *****************
  3917 ;; Defined at:
  3918 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  dividend        4    0[COMRAM] unsigned long 
  3921 ;;  divisor         4    4[COMRAM] unsigned long 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  counter         1    8[COMRAM] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  4    0[COMRAM] unsigned long 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3933 ;;      Params:         8       0       0       0       0       0       0
  3934 ;;      Locals:         1       0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0
  3936 ;;      Totals:         9       0       0       0       0       0       0
  3937 ;;Total ram usage:        9 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_RR_scheduler
  3943 ;;		_queue_insert
  3944 ;;		_queue_remove
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text28
  3949  000C56                     __ptext28:
  3950                           	opt stack 0
  3951  000C56                     ___llmod:
  3952                           	opt stack 22
  3953                           
  3954                           ;incstack = 0
  3955  000C56  5040               	movf	___llmod@divisor,w,c
  3956  000C58  1041               	iorwf	___llmod@divisor+1,w,c
  3957  000C5A  1042               	iorwf	___llmod@divisor+2,w,c
  3958  000C5C  1043               	iorwf	___llmod@divisor+3,w,c
  3959  000C5E  B4D8               	btfsc	status,2,c
  3960  000C60  D024               	goto	i2l699
  3961  000C62  0E01               	movlw	1
  3962  000C64  6E44               	movwf	___llmod@counter,c
  3963  000C66  D006               	goto	i2l1323
  3964  000C68                     i2l1321:
  3965  000C68  90D8               	bcf	status,0,c
  3966  000C6A  3640               	rlcf	___llmod@divisor,f,c
  3967  000C6C  3641               	rlcf	___llmod@divisor+1,f,c
  3968  000C6E  3642               	rlcf	___llmod@divisor+2,f,c
  3969  000C70  3643               	rlcf	___llmod@divisor+3,f,c
  3970  000C72  2A44               	incf	___llmod@counter,f,c
  3971  000C74                     i2l1323:
  3972  000C74  AE43               	btfss	___llmod@divisor+3,7,c
  3973  000C76  D7F8               	goto	i2l1321
  3974  000C78                     i2l1325:
  3975  000C78  5040               	movf	___llmod@divisor,w,c
  3976  000C7A  5C3C               	subwf	___llmod@dividend,w,c
  3977  000C7C  5041               	movf	___llmod@divisor+1,w,c
  3978  000C7E  583D               	subwfb	___llmod@dividend+1,w,c
  3979  000C80  5042               	movf	___llmod@divisor+2,w,c
  3980  000C82  583E               	subwfb	___llmod@dividend+2,w,c
  3981  000C84  5043               	movf	___llmod@divisor+3,w,c
  3982  000C86  583F               	subwfb	___llmod@dividend+3,w,c
  3983  000C88  A0D8               	btfss	status,0,c
  3984  000C8A  D008               	goto	i2l1329
  3985  000C8C  5040               	movf	___llmod@divisor,w,c
  3986  000C8E  5E3C               	subwf	___llmod@dividend,f,c
  3987  000C90  5041               	movf	___llmod@divisor+1,w,c
  3988  000C92  5A3D               	subwfb	___llmod@dividend+1,f,c
  3989  000C94  5042               	movf	___llmod@divisor+2,w,c
  3990  000C96  5A3E               	subwfb	___llmod@dividend+2,f,c
  3991  000C98  5043               	movf	___llmod@divisor+3,w,c
  3992  000C9A  5A3F               	subwfb	___llmod@dividend+3,f,c
  3993  000C9C                     i2l1329:
  3994  000C9C  90D8               	bcf	status,0,c
  3995  000C9E  3243               	rrcf	___llmod@divisor+3,f,c
  3996  000CA0  3242               	rrcf	___llmod@divisor+2,f,c
  3997  000CA2  3241               	rrcf	___llmod@divisor+1,f,c
  3998  000CA4  3240               	rrcf	___llmod@divisor,f,c
  3999  000CA6  2E44               	decfsz	___llmod@counter,f,c
  4000  000CA8  D7E7               	goto	i2l1325
  4001  000CAA                     i2l699:
  4002  000CAA  C03C  F03C         	movff	___llmod@dividend,?___llmod
  4003  000CAE  C03D  F03D         	movff	___llmod@dividend+1,?___llmod+1
  4004  000CB2  C03E  F03E         	movff	___llmod@dividend+2,?___llmod+2
  4005  000CB6  C03F  F03F         	movff	___llmod@dividend+3,?___llmod+3
  4006  000CBA  0012               	return		;funcret
  4007  000CBC                     __end_of___llmod:
  4008                           	opt stack 0
  4009  0000                     tosu	equ	0xFFF
  4010                           tosh	equ	0xFFE
  4011                           tosl	equ	0xFFD
  4012                           stkptr	equ	0xFFC
  4013                           pclatu	equ	0xFFB
  4014                           pclath	equ	0xFFA
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           intcon	equ	0xFF2
  4022                           postinc0	equ	0xFEE
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           bsr	equ	0xFE0
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           tosu	equ	0xFFF
  4037                           tosh	equ	0xFFE
  4038                           tosl	equ	0xFFD
  4039                           stkptr	equ	0xFFC
  4040                           pclatu	equ	0xFFB
  4041                           pclath	equ	0xFFA
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           postinc0	equ	0xFEE
  4050                           fsr0h	equ	0xFEA
  4051                           fsr0l	equ	0xFE9
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1h	equ	0xFE2
  4055                           fsr1l	equ	0xFE1
  4056                           bsr	equ	0xFE0
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064                           	psect	text29
  4065  000000                     __ptext29:
  4066                           	opt stack 0
  4067                           tosu	equ	0xFFF
  4068                           tosh	equ	0xFFE
  4069                           tosl	equ	0xFFD
  4070                           stkptr	equ	0xFFC
  4071                           pclatu	equ	0xFFB
  4072                           pclath	equ	0xFFA
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           postinc0	equ	0xFEE
  4081                           fsr0h	equ	0xFEA
  4082                           fsr0l	equ	0xFE9
  4083                           wreg	equ	0xFE8
  4084                           postdec1	equ	0xFE5
  4085                           fsr1h	equ	0xFE2
  4086                           fsr1l	equ	0xFE1
  4087                           bsr	equ	0xFE0
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095                           	psect	rparam
  4096  0000                     tosu	equ	0xFFF
  4097                           tosh	equ	0xFFE
  4098                           tosl	equ	0xFFD
  4099                           stkptr	equ	0xFFC
  4100                           pclatu	equ	0xFFB
  4101                           pclath	equ	0xFFA
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           intcon	equ	0xFF2
  4109                           postinc0	equ	0xFEE
  4110                           fsr0h	equ	0xFEA
  4111                           fsr0l	equ	0xFE9
  4112                           wreg	equ	0xFE8
  4113                           postdec1	equ	0xFE5
  4114                           fsr1h	equ	0xFE2
  4115                           fsr1l	equ	0xFE1
  4116                           bsr	equ	0xFE0
  4117                           indf2	equ	0xFDF
  4118                           postinc2	equ	0xFDE
  4119                           postdec2	equ	0xFDD
  4120                           fsr2h	equ	0xFDA
  4121                           fsr2l	equ	0xFD9
  4122                           status	equ	0xFD8
  4123                           
  4124                           	psect	temp
  4125  00006F                     btemp:
  4126                           	opt stack 0
  4127  00006F                     	ds	1
  4128  0000                     int$flags	set	btemp
  4129                           tosu	equ	0xFFF
  4130                           tosh	equ	0xFFE
  4131                           tosl	equ	0xFFD
  4132                           stkptr	equ	0xFFC
  4133                           pclatu	equ	0xFFB
  4134                           pclath	equ	0xFFA
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           prodh	equ	0xFF4
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1h	equ	0xFE2
  4148                           fsr1l	equ	0xFE1
  4149                           bsr	equ	0xFE0
  4150                           indf2	equ	0xFDF
  4151                           postinc2	equ	0xFDE
  4152                           postdec2	equ	0xFDD
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         515
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51     110
    BANK0           128     45      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sp_S54tcb$task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__F_APTOS.FILA_APTOS.task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp_nojoTaskCreate@task_PTR	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__verificarInput	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__pisca_led_green	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__pisca_led_yellow	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__nojoTaskIdle	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    nojoTaskCreate@task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> verificarInput(), modificar_temp(), 

    S54tcb$task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> verificarInput(), modificar_temp(), nojoTaskIdle(), 

    F_APTOS.FILA_APTOS.task_PTR	PTR FTN()PTR void  size(2) Largest target is 3
		 -> verificarInput(), modificar_temp(), nojoTaskIdle(), 

    delay_queue_create@delay_queue_handler	PTR struct queue_delay size(2) Largest target is 28
		 -> Q_DELAY(COMRAM[28]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _nojoTaskIdle in COMRAM

    None.

Critical Paths under _nojoTaskIdle in COMRAM

    None.

Critical Paths under _pisca_led_yellow in COMRAM

    None.

Critical Paths under _pisca_led_green in COMRAM

    None.

Critical Paths under _modificar_temp in COMRAM

    _valor_res_motor->i1___wmul
    _map->___awdiv
    ___awdiv->i1___wmul

Critical Paths under _verificarInput in COMRAM

    None.

Critical Paths under _timer_ISR in COMRAM

    _timer_ISR->_nojoDispatcher
    _nojoDispatcher->_RR_scheduler
    _RR_scheduler->___llmod

Critical Paths under _main in BANK0

    _main->_nojoTaskCreate
    _nojoTaskCreate->___wmul
    _nojoStart->_delay_queue_create

Critical Paths under _nojoTaskIdle in BANK0

    None.

Critical Paths under _nojoTaskIdle in BANK0

    None.

Critical Paths under _pisca_led_yellow in BANK0

    None.

Critical Paths under _pisca_led_green in BANK0

    None.

Critical Paths under _modificar_temp in BANK0

    _modificar_temp->_map

Critical Paths under _verificarInput in BANK0

    _botaoAumentar->_mostraDisplay

Critical Paths under _timer_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _nojoTaskIdle in BANK1

    None.

Critical Paths under _nojoTaskIdle in BANK1

    None.

Critical Paths under _pisca_led_yellow in BANK1

    None.

Critical Paths under _pisca_led_green in BANK1

    None.

Critical Paths under _modificar_temp in BANK1

    None.

Critical Paths under _verificarInput in BANK1

    None.

Critical Paths under _timer_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _nojoTaskIdle in BANK2

    None.

Critical Paths under _nojoTaskIdle in BANK2

    None.

Critical Paths under _pisca_led_yellow in BANK2

    None.

Critical Paths under _pisca_led_green in BANK2

    None.

Critical Paths under _modificar_temp in BANK2

    None.

Critical Paths under _verificarInput in BANK2

    None.

Critical Paths under _timer_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _nojoTaskIdle in BANK3

    None.

Critical Paths under _nojoTaskIdle in BANK3

    None.

Critical Paths under _pisca_led_yellow in BANK3

    None.

Critical Paths under _pisca_led_green in BANK3

    None.

Critical Paths under _modificar_temp in BANK3

    None.

Critical Paths under _verificarInput in BANK3

    None.

Critical Paths under _timer_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _nojoTaskIdle in BANK4

    None.

Critical Paths under _nojoTaskIdle in BANK4

    None.

Critical Paths under _pisca_led_yellow in BANK4

    None.

Critical Paths under _pisca_led_green in BANK4

    None.

Critical Paths under _modificar_temp in BANK4

    None.

Critical Paths under _verificarInput in BANK4

    None.

Critical Paths under _timer_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _nojoTaskIdle in BANK5

    None.

Critical Paths under _nojoTaskIdle in BANK5

    None.

Critical Paths under _pisca_led_yellow in BANK5

    None.

Critical Paths under _pisca_led_green in BANK5

    None.

Critical Paths under _modificar_temp in BANK5

    None.

Critical Paths under _verificarInput in BANK5

    None.

Critical Paths under _timer_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5134
                        _Init_PWM_AD
                      _nojoScheduler
                          _nojoStart
                     _nojoTaskCreate
                         _setupTimer
 ---------------------------------------------------------------------------------
 (1) _setupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nojoTaskCreate                                      14     4     10    4896
                                             31 BANK0     14     4     10
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4248
                                             25 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _nojoStart                                            0     0      0     238
                 _delay_queue_create
 ---------------------------------------------------------------------------------
 (2) _delay_queue_create                                   6     4      2     238
                                             25 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _nojoScheduler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM_AD                                          0     0      0       0
                     _Inicializa_ADC
                          _PWM1_Init
 ---------------------------------------------------------------------------------
 (2) _PWM1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Inicializa_ADC                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _nojoTaskIdle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _nojoTaskIdle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _pisca_led_yellow                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _pisca_led_green                                      1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _modificar_temp                                       3     3      0    3022
                                             16 BANK0      3     3      0
                             _LerADC
                                _map
                    _valor_res_motor
 ---------------------------------------------------------------------------------
 (4) _valor_res_motor                                      6     4      2    1179
                                              8 COMRAM     6     4      2
                         _PWM1_value
                           i1___wmul
 ---------------------------------------------------------------------------------
 (5) _PWM1_value                                           4     0      4     370
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _map                                                 16     6     10    1707
                                              0 BANK0     16     6     10
                            ___awdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (5) i1___wmul                                             6     2      4     506
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     599
                                              8 COMRAM     8     4      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _LerADC                                               6     4      2      68
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _verificarInput                                       1     1      0     386
                                             24 BANK0      1     1      0
                      _botaoAumentar
 ---------------------------------------------------------------------------------
 (4) _botaoAumentar                                        0     0      0     386
                      _mostraDisplay
 ---------------------------------------------------------------------------------
 (5) _mostraDisplay                                        5     0      5     386
                                             19 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _timer_ISR                                           14    14      0    2889
                                             37 COMRAM    14    14      0
                     _nojoDispatcher
                         _resetTimer
 ---------------------------------------------------------------------------------
 (7) _resetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _nojoDispatcher                                      12    12      0    2889
                                             25 COMRAM    12    12      0
                       _RR_scheduler
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _RR_scheduler                                        16    12      4    1729
                                              9 COMRAM    16    12      4
                            ___llmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4    1093
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_PWM_AD
     _Inicializa_ADC
     _PWM1_Init
   _nojoScheduler
   _nojoStart
     _delay_queue_create
   _nojoTaskCreate
     ___wmul
   _setupTimer

 _nojoTaskIdle (ROOT)

 _nojoTaskIdle (ROOT)

 _pisca_led_yellow (ROOT)

 _pisca_led_green (ROOT)

 _modificar_temp (ROOT)
   _LerADC
   _map
     ___awdiv
       i1___wmul (ARG)
     i1___wmul
   _valor_res_motor
     _PWM1_value
     i1___wmul

 _verificarInput (ROOT)
   _botaoAumentar
     _mostraDisplay

 _timer_ISR (ROOT)
   _nojoDispatcher
     _RR_scheduler
       ___llmod
       i2___wmul
     i2___wmul
   _resetTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1C8      17       29.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2D      2D       5       35.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      15        0.0%
DATA                 0      0     263       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Nov 07 23:21:58 2017

                                   BSR 000FE0                                     l17 0C54  
                         ___awdiv@sign 0049                    ___wmul@multiplicand 009B  
                     i1___wmul@product 0042                            __CFG_OSC$HS 000000  
                                  _PR2 000FCB                                    u860 0758  
                                  u865 074C                                    _map 0928  
                                  _sem 0001                        ?_modificar_temp 003C  
                                  wreg 000FE8                        ?_verificarInput 003C  
                    ??_valor_res_motor 0046                           __CFG_WDT$OFF 000000  
                                 l1275 0E10                                   l1267 0DE6  
                                 l1615 0BFA                                   l1811 0A0A  
                                 l1803 09C4                                   l1619 0C10  
                                 l1823 0D46                                   l1807 09F2  
                                 l1817 0D18                                   l1931 0BD6  
                                 ?_map 0080                         _Inicializa_ADC 0ECC  
                                 i2l93 0576                                   i2l94 03D6  
                                 _TMR0 000FD6                                   _TOSH 000FFE  
                                 _TOSL 000FFD                                   _TOSU 000FFF  
                                 _tBSR 001E                                   _main 0B5E  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 map@x 0080                                   fsr2l 000FD9  
                                 btemp 006F                    delay_queue_create@i 009D  
                        ??_Init_PWM_AD 004C                                   prodh 000FF4  
                                 prodl 000FF3                                   start 008E  
                         ___param_bank 000000                        ??_botaoAumentar 004C  
                                ??_map 008A                   __end_of_RR_scheduler 0890  
             __size_of_pisca_led_green 0026                                  STATUS 000FD8  
                                ?_main 003C                        __end_of___awdiv 0B5E  
                      ___awdiv@divisor 0046                        __end_of___llmod 0CBC  
                                _T2CON 000FCA                                  i1l330 0E80  
                                i2l311 0052                                  i2l699 0CAA  
                      ___awdiv@counter 0048                                  u33_20 0DEE  
                                u33_26 0DF0                                  u34_20 0E18  
                                u34_26 0E1A                                  _PORTB 000F81  
                                _PORTD 000F83                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                u97_20 09CC                                  u97_26 09CE  
                       _nojoDispatcher 0092                     __size_of_PWM1_Init 0016  
                                _tWORK 001F                 __end_of_Inicializa_ADC 0EDE  
                          ?_PWM1_value 003E                                  pclath 000FFA  
                                tablat 000FF5                  __end_of_nojoScheduler 0EFA  
                     __end_ofi1___wmul 0E58                       __end_ofi2___wmul 0E7E  
                                status 000FD8                    i1___wmul@multiplier 003E  
                      __initialization 0DB8                           __end_of_main 0BDA  
                  __end_of_Init_PWM_AD 0F10                                 ??_main 004C  
                        __activetblptr 000000                 __end_of_nojoDispatcher 05B2  
                      ?_Inicializa_ADC 003C                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
            RR_scheduler@pos_next_task 0051                       ___llmod@dividend 003C  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                               _CCPR1L 000FBE                                 _CCPR2L 000FBB  
                     ___awdiv@dividend 0044                                 u100_20 0D24  
                               u100_26 0D26                                 i1l1631 0D64  
                               i1l1711 08F2                                 i1l1635 0D72  
                               i1l1653 0AEE                                 i1l1665 0B14  
                               i1l1681 0B46                                 i1l1739 0CEA  
                               i1l1667 0B1C                                 i1l1659 0AFE  
                               i1l1685 0B54                                 i1l1677 0B3C  
                               i1l1669 0B20                                 i2l1321 0C68  
                               i2l1323 0C74                                 i2l1325 0C78  
                       _nojoTaskCreate 05B2                                 i2l1329 0C9C  
                               i2l1451 02CA                                 i2l1359 0810  
                               i2l1449 0126                                 _TMR0ON 007EAF  
                               _STKPTR 000FFC                                 _LerADC 0E7E  
                PWM1_value@resistencia 0040               __end_of_pisca_led_yellow 0E0C  
                    __end_of_PWM1_Init 0ECC                                 ___wmul 0D82  
                            ??___awdiv 0048                              ??___llmod 0044  
                               _dezena 0017                    __size_of_PWM1_value 000A  
                               clear_0 0DC0                                 clear_1 0DD2  
                     ___awdiv@quotient 004A                        ?_nojoDispatcher 003C  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      ??_pisca_led_green 003D  
               __end_of_nojoTaskCreate 07E0                             __accesstop 0080  
              __end_of__initialization 0DD8                          ___rparam_used 000001  
                          _Init_PWM_AD 0F06                  __size_of_RR_scheduler 00B0  
                       __pcstackCOMRAM 003C                       ??_modificar_temp 0090  
                      _valor_res_motor 0890                              ?i1___wmul 003E  
                            ?i2___wmul 003C                       ??_verificarInput 0098  
                      ?_nojoTaskCreate 009F             mostraDisplay@identificador 0097  
                         _RR_scheduler 07E0                                ?_LerADC 003E  
          __size_of_delay_queue_create 007C                          ?_nojoTaskIdle 003C  
                __end_of_mostraDisplay 0D82                                ?___wmul 0099  
                              _CCP1CON 000FBD                                _CCP2CON 000FBA  
                   __size_of_nojoStart 0086                             ??i1___wmul 0042  
                           ??i2___wmul 0040                     __size_of_timer_ISR 0086  
                              _F_APTOS 00AD                                i1u90_20 0CDE  
                              i1u87_20 089C                                _Q_DELAY 0020  
                         ??_PWM1_value 0042                         ??_nojoTaskIdle 0080  
                 _temperatura_desejada 001B                        __size_of_LerADC 0022  
                              __Hparam 0000                                __Lparam 0000  
              __end_of_valor_res_motor 0928                 nojoTaskCreate@task_PTR 00A7  
                              ___awdiv 0ADA                        __size_of___wmul 0036  
                              ___llmod 0C56                                _tSTATUS 001D  
                              __pcinit 0DB8                  __end_of_botaoAumentar 0D0C  
                              __ramtop 0600                     __end_of_PWM1_value 0F1A  
                              __ptext0 0B5E                                __ptext1 0EA0  
                              __ptext2 05B2                                __ptext3 0D82  
                              __ptext4 0A54                                __ptext5 0BDA  
                              __ptext6 0EEE                                __ptext7 0F06  
                              __ptext8 0EB6                                __ptext9 0ECC  
                            _T0CONbits 000FD5                       ??_Inicializa_ADC 004C  
                  valor_res_motor@temp 0044                           __size_of_map 0098  
                              _unidade 0019                    mostraDisplay@dezena 0095  
                 end_of_initialization 0DD8                      __end_of_nojoStart 0ADA  
                  i2___wmul@multiplier 003C  delay_queue_create@delay_queue_handler 0099  
                    __end_of_timer_ISR 008E                             _resetTimer 0EFA  
               nojoDispatcher@task_pos 005D                                postdec1 000FE5  
                              postdec2 000FDD                      ?_pisca_led_yellow 003C  
                              postinc0 000FEE                                postinc2 000FDE  
                     ??_nojoDispatcher 0055                  i1___wmul@multiplicand 0040  
                      _pisca_led_green 0E0C                     ??_pisca_led_yellow 003C  
                            _PWM1_Init 0EB6                              _PORTAbits 000F80  
                            _PORTCbits 000F82                 __size_of_nojoScheduler 000C  
                           _setupTimer 0EA0                              _TRISAbits 000F92  
                            _TRISCbits 000F94                             map@out_max 0088  
                           map@out_min 0086                           ?_Init_PWM_AD 003C  
                       __end_of_LerADC 0EA0                          RR_scheduler@i 004D  
                     ?_valor_res_motor 0044                         __end_of___wmul 0DB8  
                           ?_PWM1_Init 003C                       i2___wmul@product 0040  
                     ??_nojoTaskCreate 00A9                     modificar_temp@temp 0091  
                 __end_of_nojoTaskIdle 0EEE                    start_initialization 0DB8  
                    __size_ofi1___wmul 0026                      __size_ofi2___wmul 0026  
                          __end_of_map 09C0                          _nojoScheduler 0EEE  
                      ___llmod@divisor 0040                        ___llmod@counter 0044  
                             ??_LerADC 0040                            ?_resetTimer 003C  
              __end_of_pisca_led_green 0E32                       nojoTaskCreate@id 009F  
                             ??___wmul 004C                   PWM1_value@velocidade 003E  
                          ?_setupTimer 003C                            __pbssBIGRAM 00AD  
                          __pbssCOMRAM 0001                          __pcstackBANK0 0080  
                       ?_nojoScheduler 003C             __end_of_delay_queue_create 0C56  
                            __pintcode 0008                               ?___awdiv 0044  
                             ?___llmod 003C                            ??_PWM1_Init 004C  
                  nojoDispatcher@state 005C                    __size_of_resetTimer 000C  
              __size_of_modificar_temp 0094                 __size_of_mostraDisplay 0038  
              __size_of_verificarInput 003E                         ___wmul@product 009D  
                             _LATAbits 000F89                    __size_of_setupTimer 0016  
                            _nojoStart 0A54                       ?_pisca_led_green 003C  
                 __size_of_Init_PWM_AD 000A                              _timer_ISR 0008  
                __size_of_nojoTaskIdle 0010                              map@in_max 0084  
                            map@in_min 0082                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0099                               i1___wmul 0E32  
                             i2___wmul 0E58                  RR_scheduler@installed 0049  
            __size_of_pisca_led_yellow 002A                        ??_nojoScheduler 004C  
              valor_res_motor@resistor 0046                 __size_of_botaoAumentar 0050  
                           ?_nojoStart 003C                           _nojoTaskIdle 0EDE  
                             __Hrparam 0000                               __Lrparam 0000  
                  nojoTaskCreate@prior 00A3                             ?_timer_ISR 003C  
                        _mostraDisplay 0D4A                       __size_of___awdiv 0084  
                i2___wmul@multiplicand 003E                       __size_of___llmod 0066  
                             __ptext10 0EDE                               __ptext11 0DE2  
                             __ptext20 0D0C                               __ptext12 0E0C  
                             __ptext21 0CBC                               __ptext13 09C0  
                             __ptext22 0D4A                               __ptext14 0890  
                             __ptext15 0F10                               __ptext24 0EFA  
                             __ptext16 0928                               __ptext25 0092  
                             __ptext17 0E32                               __ptext26 07E0  
                             __ptext18 0ADA                               __ptext27 0E58  
                             __ptext19 0E7E                               __ptext28 0C56  
                             __ptext29 0000                          ?_RR_scheduler 0045  
              __size_of_Inicializa_ADC 0012                   valor_res_motor@motor 0048  
                        __size_of_main 007C                           ??_resetTimer 003C  
                       ?_mostraDisplay 0093                               int$flags 006F  
                         ??_setupTimer 004C                          _botaoAumentar 0CBC  
             __size_of_valor_res_motor 0098                             _INTCONbits 000FF2  
                 mostraDisplay@unidade 0093                __size_of_nojoDispatcher 0520  
                   __end_of_resetTimer 0F06                         _modificar_temp 09C0  
                       ??_RR_scheduler 0049                               intlevel1 0000  
                             intlevel2 0000                         _verificarInput 0D0C  
                           LerADC@temp 0042                            ??_nojoStart 004C  
                   __end_of_setupTimer 0EB6                            ??_timer_ISR 0061  
                   _delay_queue_create 0BDA                         ?_botaoAumentar 003C  
                  ?_delay_queue_create 0099                 __end_of_modificar_temp 0A54  
                     _pisca_led_yellow 0DE2                 __end_of_verificarInput 0D4A  
                           _PWM1_value 0F10                __size_of_nojoTaskCreate 022E  
                 ??_delay_queue_create 009B                        ??_mostraDisplay 004C  
